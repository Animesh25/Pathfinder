{"version":3,"sources":["Components/Node.js","algorithms/common_methods/methods.js","algorithms/a_star_search.js","algorithms/dijkstra.js","algorithms/breadth_first.js","algorithms/depth_first.js","algorithms/best_first.js","algorithms/bidirectional_search.js","Helpers/path_finder.js","Components/Dropdown.js","Helpers/maze_creation.js","Components/ColourCode.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","x","y","useEffect","setWall","isWall","setStart","isStart","setEnd","isEnd","setPath","isPath","setVisited","isVisited","useState","className","undefined","handleMouseEnter","onMouseDown","handleMouseDown","onMouseEnter","onMouseUp","handleMouseUp","getSixNeighbours","node","ROWS","COLS","neighbours","push","getFourNeighbours","findPath","startLoc","endLoc","Grid","chosenDirection","console","log","open_nodes","closed_nodes","length","node_lowest_cost","find_lowest_node","indexOf","i","neighbour","isDiagonal","g_score","h_score","f_score","distance_from_end","contains","remove","last_closed","Math","abs","discovered_nodes","list","splice","path","slice","min_heuristic","min_distance_to_end","dijkstra_algorithm","visited","unvisited","cost","update_cost","remove_from_unvisited","previous","found","current","unvisted","min_cost","bfs","removed","queue","head","shift","dfs","stack","best_first","bidirectional","startResult","endResult","start_queue","end_queue","updateStart","update_queue","updateEnd","timeout","delay","Promise","res","setTimeout","find_path_from_closed","a","found_start","last","unshift","draw_path","type","newGrid","Dropdown","setOptions","options","hovered","setHover","default","mainValue","setMainValue","menuOptions","value","onClick","changeValue","dropDownValueChanged","onMouseLeave","maze_1","ColourCode","App","setGrid","mouseDown","setMouseDown","setStartLoc","setEndLoc","startDrag","setStartDrag","endDrag","setEndDrag","gridPath","visitedPath","chosenAlgorithm","setAlgorithm","setDirection","createGrid","grid","dijkstra","clear_visited_path","clear_old_path","draw_path_helper","find_path_from_closed_helper","BFS","bidirectional_search","final_path","best_first_search","DFS","aStarSearch","clearWalls","j","horizontalMaze","notWall_i","verticalMaze","map","row","yIndex","xIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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AAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzF,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzF,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzF,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzF,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzF,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzF,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzF,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzF,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzF,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACzF,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,G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","file":"static/js/main.08111b7f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../CSS/node.css';\r\n\r\nfunction Node(props) {\r\n\r\n  const x = props.x;\r\n  const y = props.y;\r\n\r\n  useEffect(() => {\r\n    setWall(props.isWall) //> I'm dispatching an action here.\r\n    setStart(props.isStart) //> I'm dispatching an action here.\r\n    setEnd(props.isEnd)\r\n    setPath(props.isPath)\r\n    setVisited(props.isVisited)\r\n  }, [props.isWall, props.isStart, props.isEnd, props.isPath, props.isVisited])\r\n\r\n  const [isWall, setWall] = useState(false);\r\n  const [isStart, setStart] = useState(false);\r\n  const [isEnd, setEnd] = useState(false);\r\n  const [isPath, setPath] = useState(false);\r\n  const [isVisited, setVisited] = useState(false);\r\n\r\n\r\n  let className = \"node\";\r\n  if (isEnd === true) {\r\n    className = \"end\";\r\n  }\r\n  else if (isStart === true) {\r\n    className = \"start\";\r\n  }\r\n  else if (isWall === true) {\r\n    className = \"wall\";\r\n  }\r\n  else if (isVisited === true) {\r\n    className = \"visited\";\r\n  }\r\n  else if (isPath === true) {\r\n    className = \"path\";\r\n  }\r\n  else {\r\n    className = \"node\";\r\n  }\r\n\r\n  let mainBody=<div className={className} />;\r\n  if (props.handleMouseEnter === undefined) {\r\n    mainBody = <div className={className} />\r\n  }\r\n  else {\r\n    mainBody = <div\r\n      onMouseDown={() => props.handleMouseDown(x, y)}\r\n      onMouseEnter={() => props.handleMouseEnter(x, y)}\r\n      onMouseUp={() => props.handleMouseUp()}\r\n      className={className} />\r\n  }\r\n  return (\r\n    mainBody\r\n  );\r\n}\r\n\r\nexport default Node;\r\n","export const getSixNeighbours = (node, ROWS, COLS) => {\r\n    // node=node.value\r\n    // console.log(\"row in get neigbours=\", ROWS);\r\n    let neighbours = [];\r\n    // console.log(\"niehgbours func node=\",node.value)\r\n    if (node[0] > 0) {\r\n        neighbours.push([[node[0] - 1, node[1]],false]);\r\n        if (node[1] > 0) {\r\n            neighbours.push([[node[0] - 1, node[1] - 1],true]);\r\n        }\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([[node[0], node[1] - 1],false]);\r\n        if (node[0] < ROWS - 1) {\r\n            neighbours.push([[node[0] + 1, node[1] - 1],true]);\r\n        }\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([[node[0] + 1, node[1]],false]);\r\n        if (node[1] < COLS - 1) {\r\n            neighbours.push([[node[0] + 1, node[1] + 1],true]);\r\n        }\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([[node[0], node[1] + 1],false]);\r\n        if (node[0] > 0) {\r\n            neighbours.push([[node[0] - 1, node[1] + 1],true]);\r\n        }\r\n    }\r\n\r\n    return neighbours;\r\n}\r\nexport const getFourNeighbours = (node, ROWS, COLS) => {\r\n    let neighbours = [];\r\n    if (node[0] > 0) {\r\n        neighbours.push([[node[0] - 1, node[1]],false]);\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([[node[0], node[1] - 1],false]);\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([[node[0] + 1, node[1]],false]);\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([[node[0], node[1] + 1],false]);\r\n    }\r\n\r\n    return neighbours;\r\n\r\n}","\r\nimport {getFourNeighbours,getSixNeighbours} from './common_methods/methods';\r\n\r\nexport const findPath = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    console.log(\"rows=\",ROWS,\" cols=\",COLS,\" startLoc=\",startLoc,\"  endloc=\",endLoc,\"  grid=\",Grid);\r\n\r\n    let open_nodes = [[startLoc[0], startLoc[1], 0, 0, 0]];\r\n    let closed_nodes = [];\r\n\r\n    while (open_nodes.length > 0 && open_nodes.length < 20000) {\r\n\r\n        const node_lowest_cost = find_lowest_node(open_nodes, closed_nodes);\r\n        if (node_lowest_cost === undefined) break;\r\n\r\n        // console.log(\"lowest=\", node_lowest_cost);\r\n        // console.log(\"chosen from\", open_nodes);\r\n\r\n        let neighbours;\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getSixNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        // console.log(\"neighbours================\",neighbours);\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal=neighbours[i][1];\r\n            let g_score, h_score, f_score = 0;\r\n\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue;\r\n                // console.log(\"isWall\")\r\n                // g_score = 10000;\r\n                // h_score = 10000;\r\n                // f_score = g_score + h_score;\r\n            }\r\n            else {\r\n                if(isDiagonal) g_score = node_lowest_cost[2] + 2.4;\r\n                else g_score = node_lowest_cost[2] + 2;\r\n                \r\n                h_score = distance_from_end(neighbour,endLoc);\r\n                f_score = g_score + h_score;\r\n            }\r\n\r\n\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                closed_nodes.push(node_lowest_cost);\r\n                closed_nodes.push([neighbour[0], neighbour[1], f_score, h_score, g_score, node_lowest_cost]);\r\n                console.log(\"end found at:\",endLoc);\r\n                break;\r\n            }\r\n\r\n            if (contains(open_nodes, neighbour)) {\r\n                // if (distance_from_start(neighbour) <= f_score) console.log(\"1st if \", neighbour);\r\n            }\r\n            else if (contains(closed_nodes, neighbour)) {\r\n                // console.log(\"neighbour \", neighbour, \" in closed list\");\r\n                // if (distance_from_start(neighbour) <= f_score) console.log(\"2nd if \", neighbour);\r\n                // else {\r\n                // console.log(\"closed_nodes l=\", closed_nodes.length)\r\n                remove(closed_nodes, neighbour);\r\n                // console.log(\"closed_nodes AFTER l=\", closed_nodes.length);\r\n                open_nodes.push([neighbour[0], neighbour[1], f_score, h_score, g_score, node_lowest_cost]);\r\n                // }\r\n\r\n            }\r\n            else {\r\n                open_nodes.push([neighbour[0], neighbour[1], f_score, h_score, g_score, node_lowest_cost]);\r\n            }\r\n        }\r\n        if (closed_nodes.length > 0) {\r\n            const last_closed = closed_nodes[closed_nodes.length - 1];\r\n            if (last_closed[0] === endLoc[0] && last_closed[1] === endLoc[1]) {       \r\n                break;\r\n            }\r\n        }\r\n        if (!contains(closed_nodes, node_lowest_cost)) {\r\n            closed_nodes.push(node_lowest_cost);\r\n        }\r\n    }\r\n    return closed_nodes;\r\n\r\n}\r\n\r\n const getNeighbours = (node,ROWS,COLS) => {\r\n    // node=node.value\r\n    // console.log(\"row in get neigbours=\",ROWS);\r\n    let neighbours = [];\r\n    // console.log(\"niehgbours func node=\",node.value)\r\n    if (node[0] > 0) {\r\n        neighbours.push([node[0] - 1, node[1]]);\r\n        if (node[1] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] - 1]);\r\n        }\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([node[0], node[1] - 1]);\r\n        if (node[0] < ROWS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] - 1]);\r\n        }\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([node[0] + 1, node[1]]);\r\n        if (node[1] < COLS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] + 1]);\r\n        }\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([node[0], node[1] + 1]);\r\n        if (node[0] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] + 1]);\r\n        }\r\n    }\r\n\r\n    return neighbours;\r\n\r\n}\r\n const distance_from_start = (node,startLoc) => {\r\n    const x = Math.abs(node[0] - startLoc[0]);\r\n    const y = Math.abs(node[1] - startLoc[1]);\r\n    return ((x * x) + (y * y))\r\n}\r\n const distance_from_end = (node,endLoc) => {\r\n    //  console.log(\"distance end====================================\",node,\"  endLoc=\",endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\n const contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n const remove = (list, node) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n            return list.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n const find_lowest_node = (discovered_nodes, path) => {\r\n    const copy = discovered_nodes.slice();\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_heuristic = 10000000;\r\n    let min_distance_to_end = 1000000;\r\n    let node;\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][2] < min_heuristic && !contains(path, discovered_nodes[i])) {\r\n            min_heuristic = discovered_nodes[i][2];\r\n            min_distance_to_end = discovered_nodes[i][3];\r\n            node = discovered_nodes[i];\r\n        }\r\n        else if (discovered_nodes[i][2] === min_heuristic && discovered_nodes[i][3] < min_distance_to_end && !contains(path, discovered_nodes[i])) {\r\n            min_heuristic = discovered_nodes[i][2];\r\n            min_distance_to_end = discovered_nodes[i][3];\r\n            node = discovered_nodes[i];\r\n            // console.log(\"found lowest \", node);\r\n        }\r\n    }\r\n    return node;\r\n}\r\n\r\n","import {getFourNeighbours,getSixNeighbours} from './common_methods/methods';\r\n\r\nexport const dijkstra_algorithm = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    //                 -------Node------------ | Cost | Previous\r\n    let visited = [];\r\n    let unvisited = [[startLoc[0], startLoc[1], 0, null]];\r\n\r\n\r\n\r\n    while (unvisited.length > 0 && unvisited.length < 20000) {\r\n\r\n        const node_lowest_cost = find_lowest_node(unvisited);\r\n        \r\n        let neighbours;\r\n        if (node_lowest_cost === undefined) { console.log(\"node_lowest=undefined so break\"); break; }\r\n        \r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getSixNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        \r\n        \r\n        \r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal=neighbours[i][1];\r\n            if (contains(visited, neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue\r\n            }\r\n            else {\r\n                if(isDiagonal) cost = 1.41 + node_lowest_cost[2];\r\n                else cost = 1 + node_lowest_cost[2];\r\n                \r\n            }\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                visited.push(node_lowest_cost);\r\n                visited.push([neighbour[0], neighbour[1], cost, node_lowest_cost]);\r\n                // console.log(\"end found\");\r\n                return visited;\r\n            }\r\n            update_cost(neighbour, cost, node_lowest_cost, unvisited);\r\n\r\n        }\r\n        unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n        visited.push(node_lowest_cost);\r\n        // console.log(\"visited=\" + visited);\r\n        // console.log(\"not visited=\" + unvisited);\r\n\r\n\r\n    }\r\n    return visited;\r\n\r\n\r\n}\r\nconst update_cost = (node, cost, previous, unvisited) => {\r\n    let found = false;\r\n    for (let i = 0; i < unvisited.length; i++) {\r\n        let current = unvisited[i];\r\n        if (current[0] == node[0] && current[1] == node[1]) {\r\n            found = true;\r\n            if (unvisited[2] > cost) {\r\n                unvisited[2] = cost;\r\n                unvisited[3] = previous;\r\n                return unvisited;\r\n            }\r\n        }\r\n    }\r\n    if (!found) unvisited.push([node[0], node[1], cost, previous]);\r\n    return unvisited;\r\n}\r\nconst remove_from_unvisited = (node, unvisited) => {\r\n\r\n    for (let i = 0; i < unvisited.length; i++) {\r\n        let current = unvisited[i];\r\n        if (current[0] == node[0] && current[1] == node[1]) unvisited.splice(i, 1);\r\n    }\r\n    return unvisited;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst distance_from_start = (node, startLoc) => {\r\n    const x = Math.abs(node[0] - startLoc[0]);\r\n    const y = Math.abs(node[1] - startLoc[1]);\r\n    return ((x * x) + (y * y))\r\n}\r\nconst distance_from_end = (node, endLoc) => {\r\n    // console.log(\"distance end====================================\", node, \"  endLoc=\", endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst remove = (list, node) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n            return list.splice(i, 1);\r\n        }\r\n    }\r\n}\r\nconst find_lowest_node = (unvisted) => {\r\n\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_cost = 10000000;\r\n    let node;\r\n    for (let i = 0; i < unvisted.length; i++) {\r\n        if (unvisted[i][2] < min_cost) {\r\n            min_cost = unvisted[i][2];\r\n            node = unvisted[i];\r\n        }\r\n\r\n    }\r\n    return node;\r\n}\r\n\r\n","import {getFourNeighbours,getSixNeighbours} from './common_methods/methods';\r\n\r\n\r\nexport const bfs = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    //                 -------Node------------ | Cost | Previous\r\n    let removed=[];\r\n    let queue = [[startLoc[0], startLoc[1], 0, null]];\r\n    while (queue.length>0) {\r\n\r\n        const head = queue[0];\r\n\r\n        if (head === undefined) { console.log(\"head=undefined so break\"); break; }\r\n\r\n        let neighbours;\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(head, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getSixNeighbours(head, ROWS, COLS);\r\n        }\r\n\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal=neighbours[i][1];\r\n            \r\n            if (contains(queue, neighbour) || contains(removed,neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue\r\n            }\r\n            else {\r\n                if(isDiagonal) cost = 1.41 + head[2];\r\n                else cost = 1 + head[2];\r\n                \r\n            }\r\n            queue.push([neighbour[0], neighbour[1], cost, head]);\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                removed.push(queue.shift());\r\n                removed.push([neighbour[0], neighbour[1], cost, head]);\r\n                return removed;\r\n            }  \r\n\r\n        }\r\n        removed.push(queue.shift());\r\n        // unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n     \r\n\r\n\r\n    }\r\n    return removed;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n\r\n","import {getFourNeighbours,getSixNeighbours} from './common_methods/methods';\r\n\r\n\r\nexport const dfs = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    //                 -------Node------------ | Cost | Previous\r\n    let removed=[];\r\n    let stack = [[startLoc[0], startLoc[1], 0, null]];\r\n    while (stack.length>=0 && stack.length<1000) {\r\n\r\n        const head = stack[stack.length-1];\r\n        console.log(\"stack =\",stack);\r\n        removed.push(head);\r\n        stack.splice(stack.length-1,1);\r\n        if (head === undefined) { console.log(\"head=undefined so break\"); break; }\r\n\r\n        let neighbours;\r\n\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(head, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getSixNeighbours(head, ROWS, COLS);\r\n        }\r\n        \r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal=neighbours[i][1];\r\n            //if node already in stack, then remove it and push it to the back\r\n            if (contains(removed,neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue\r\n            }\r\n            else {\r\n                if(isDiagonal) cost = 1.41 + head[2];\r\n                else cost = 1 + head[2];\r\n            }\r\n            stack.push([neighbour[0], neighbour[1], cost, head]);\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                removed.push(head);\r\n                removed.push([neighbour[0], neighbour[1], cost, head]);\r\n                return removed;\r\n            }  \r\n\r\n        }\r\n        \r\n        // unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n     \r\n\r\n\r\n    }\r\n    return removed;\r\n\r\n\r\n}\r\nconst update_cost = (node, cost, previous, unvisited) => {\r\n    let found = false;\r\n    for (let i = 0; i < unvisited.length; i++) {\r\n        let current = unvisited[i];\r\n        if (current[0] == node[0] && current[1] == node[1]) {\r\n            found = true;\r\n            if (unvisited[2] > cost) {\r\n                unvisited[2] = cost;\r\n                unvisited[3] = previous;\r\n                return unvisited;\r\n            }\r\n        }\r\n    }\r\n    if (!found) unvisited.push([node[0], node[1], cost, previous]);\r\n    return unvisited;\r\n}\r\nconst remove_from_unvisited = (node, unvisited) => {\r\n\r\n    for (let i = 0; i < unvisited.length; i++) {\r\n        let current = unvisited[i];\r\n        if (current[0] == node[0] && current[1] == node[1]) unvisited.splice(i, 1);\r\n    }\r\n    return unvisited;\r\n}\r\n\r\nconst getNeighbours = (node, ROWS, COLS) => {\r\n    // node=node.value\r\n    console.log(\"row in get neigbours=\", ROWS);\r\n    let neighbours = [];\r\n    // console.log(\"niehgbours func node=\",node.value)\r\n    //TOP\r\n    if (node[0] > 0) {\r\n        neighbours.push([node[0] - 1, node[1]]);\r\n        //Top Left\r\n        if (node[1] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] - 1]);\r\n        }\r\n    }\r\n    //LEFT\r\n    if (node[1] > 0) {\r\n        neighbours.push([node[0], node[1] - 1]);\r\n        //Bottom Left\r\n        if (node[0] < ROWS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] - 1]);\r\n        }\r\n    }\r\n    //BOTTOM\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([node[0] + 1, node[1]]);\r\n        if (node[1] < COLS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] + 1]);\r\n        }\r\n    }\r\n    //RIGHT\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([node[0], node[1] + 1]);\r\n        if (node[0] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] + 1]);\r\n        }\r\n    }\r\n    //[top,left,bottom,right]\r\n    console.log(\"neibours of:\",node,\"   =\",neighbours);\r\n    return neighbours;\r\n\r\n}\r\nconst distance_from_start = (node, startLoc) => {\r\n    const x = Math.abs(node[0] - startLoc[0]);\r\n    const y = Math.abs(node[1] - startLoc[1]);\r\n    return ((x * x) + (y * y))\r\n}\r\nconst distance_from_end = (node, endLoc) => {\r\n    console.log(\"distance end====================================\", node, \"  endLoc=\", endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst remove = (list, node) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n            return list.splice(i, 1);\r\n        }\r\n    }\r\n}\r\nconst find_lowest_node = (unvisted) => {\r\n\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_cost = 10000000;\r\n    let node;\r\n    for (let i = 0; i < unvisted.length; i++) {\r\n        if (unvisted[i][2] < min_cost) {\r\n            min_cost = unvisted[i][2];\r\n            node = unvisted[i];\r\n        }\r\n\r\n    }\r\n    return node;\r\n}\r\n\r\n","import {getFourNeighbours,getSixNeighbours} from './common_methods/methods';\r\n\r\n\r\nexport const best_first = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    console.log(\"rows=\",ROWS,\" cols=\",COLS,\" startLoc=\",startLoc,\"  endloc=\",endLoc,\"  grid=\",Grid);\r\n\r\n    let open_nodes = [[startLoc[0], startLoc[1], 0, 0, 0]];\r\n    let closed_nodes = [];\r\n\r\n    while (open_nodes.length > 0 && open_nodes.length < 20000) {\r\n        const node_lowest_cost = find_lowest_node(open_nodes, closed_nodes);\r\n        if (node_lowest_cost === undefined) break;\r\n\r\n        // console.log(\"lowest=\", node_lowest_cost);\r\n        // console.log(\"chosen from\", open_nodes);\r\n\r\n\r\n        let neighbours;\r\n\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getSixNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        console.log(\"neighbours================\",neighbours);\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal=neighbours[i][1];\r\n            let h_score= 0;\r\n\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue;\r\n            }\r\n            else {\r\n                h_score = distance_from_end(neighbour,endLoc);\r\n            }\r\n\r\n\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                closed_nodes.push(node_lowest_cost);\r\n                closed_nodes.push([neighbour[0], neighbour[1], h_score, node_lowest_cost]);\r\n                // console.log(\"end found\");\r\n                break;\r\n            }\r\n\r\n            if (contains(open_nodes, neighbour)) {\r\n                // if (distance_from_start(neighbour) <= f_score) console.log(\"1st if \", neighbour);\r\n            }\r\n            else if (contains(closed_nodes, neighbour)) {\r\n                // console.log(\"neighbour \", neighbour, \" in closed list\");\r\n                // if (distance_from_start(neighbour) <= f_score) console.log(\"2nd if \", neighbour);\r\n                // else {\r\n                // console.log(\"closed_nodes l=\", closed_nodes.length)\r\n                remove(closed_nodes, neighbour);\r\n                // console.log(\"closed_nodes AFTER l=\", closed_nodes.length);\r\n                open_nodes.push([neighbour[0], neighbour[1],h_score, node_lowest_cost]);\r\n                // }\r\n\r\n            }\r\n            else {\r\n                open_nodes.push([neighbour[0], neighbour[1], h_score, node_lowest_cost]);\r\n            }\r\n        }\r\n        if (closed_nodes.length > 0) {\r\n            const last_closed = closed_nodes[closed_nodes.length - 1];\r\n            if (last_closed[0] === endLoc[0] && last_closed[1] === endLoc[1]) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!contains(closed_nodes, node_lowest_cost)) {\r\n            closed_nodes.push(node_lowest_cost);\r\n        }\r\n\r\n        // remove(open_nodes, node_lowest_cost);\r\n        // console.log(\"dn=\", open_nodes);\r\n\r\n\r\n        // break\r\n    }\r\n    // console.log(\"path=\", closed_nodes);\r\n\r\n    return closed_nodes;\r\n\r\n}\r\n\r\n const getNeighbours = (node,ROWS,COLS) => {\r\n    // node=node.value\r\n    console.log(\"row in get neigbours=\",ROWS);\r\n    let neighbours = [];\r\n    // console.log(\"niehgbours func node=\",node.value)\r\n    if (node[0] > 0) {\r\n        neighbours.push([node[0] - 1, node[1]]);\r\n        if (node[1] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] - 1]);\r\n        }\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([node[0], node[1] - 1]);\r\n        if (node[0] < ROWS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] - 1]);\r\n        }\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([node[0] + 1, node[1]]);\r\n        if (node[1] < COLS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] + 1]);\r\n        }\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([node[0], node[1] + 1]);\r\n        if (node[0] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] + 1]);\r\n        }\r\n    }\r\n\r\n    return neighbours;\r\n\r\n}\r\n const distance_from_start = (node,startLoc) => {\r\n    const x = Math.abs(node[0] - startLoc[0]);\r\n    const y = Math.abs(node[1] - startLoc[1]);\r\n    return ((x * x) + (y * y))\r\n}\r\n const distance_from_end = (node,endLoc) => {\r\n     console.log(\"distance end====================================\",node,\"  endLoc=\",endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\n const contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n const remove = (list, node) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n            return list.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n const find_lowest_node = (discovered_nodes, path) => {\r\n    const copy = discovered_nodes.slice();\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_heuristic = 10000000;\r\n    let node;\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][2] < min_heuristic && !contains(path, discovered_nodes[i])) {\r\n            min_heuristic = discovered_nodes[i][2];\r\n            node = discovered_nodes[i];\r\n        }\r\n    }\r\n    return node;\r\n}\r\n\r\n","import { getFourNeighbours, getSixNeighbours } from './common_methods/methods';\r\n\r\nlet removed = [];\r\nexport const bidirectional = (ROWS, COLS, startLoc, endLoc, Grid, chosenDirection) => {\r\n    removed=[];\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    //                 -------Node------------ | Cost | Previous\r\n    \r\n    let start_queue = [[startLoc[0], startLoc[1], 0, null]];\r\n    let end_queue = [[endLoc[0], endLoc[1], 0, null]];\r\n    let startResult,endResult\r\n\r\n    while (start_queue.length > 0) {\r\n\r\n        const updateStart=update_queue(start_queue,ROWS,COLS,Grid,chosenDirection);\r\n        start_queue=updateStart[0];\r\n        startResult=updateStart[1];\r\n\r\n        const updateEnd=update_queue(end_queue,ROWS,COLS,Grid,chosenDirection);\r\n        end_queue=updateEnd[0];\r\n        endResult=updateEnd[1];\r\n                \r\n        if(startResult || endResult) return removed;\r\n        \r\n    }\r\n    return removed;\r\n\r\n\r\n}\r\n\r\nconst update_queue = (queue,ROWS,COLS,Grid,chosenDirection) => {\r\n    const head = queue[0];\r\n    if (head === undefined) { console.log(\"head=undefined so break\"); queue.shift(); return queue }\r\n    \r\n    if(contains(removed,head)){\r\n        return [queue,true]\r\n    } \r\n    \r\n    let neighbours;\r\n    if (chosenDirection.indexOf(\"4\") > -1) {\r\n        neighbours = getFourNeighbours(head, ROWS, COLS);\r\n    }\r\n    else {\r\n        neighbours = getSixNeighbours(head, ROWS, COLS);\r\n    }\r\n\r\n    for (let i = 0; i < neighbours.length; i++) {\r\n        const neighbour = neighbours[i][0];\r\n        const isDiagonal = neighbours[i][1];\r\n\r\n        if (contains(queue, neighbour) || contains(removed, neighbour)) continue;\r\n        let cost = 0;\r\n        if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n            console.log(\"---------------------------------------\")\r\n            continue\r\n        }\r\n        else {\r\n            if (isDiagonal) cost = 1.41 + head[2];\r\n            else cost = 1 + head[2];\r\n        }\r\n        queue.push([neighbour[0], neighbour[1], cost, head]);\r\n        // if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n        //     removed.push(queue.shift());\r\n        //     removed.push([neighbour[0], neighbour[1], cost, head]);\r\n        //     return removed;\r\n        // }\r\n\r\n    }\r\n    removed.push(queue.shift());\r\n    return [queue,false];\r\n    // unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n\r\n","import Node from '../Components/Node';\r\n\r\nexport function timeout(delay) {\r\n    return new Promise(res => setTimeout(res, delay));\r\n}\r\n\r\nexport const find_path_from_closed = async (closed_nodes, startLoc) => {\r\n    let path = [];\r\n    let found_start = false;\r\n    let last = closed_nodes[closed_nodes.length - 1];\r\n    while (found_start === false) {\r\n        path.unshift(last);\r\n        if (last === undefined) break;\r\n        if (last[0] === startLoc[0] && last[1] === startLoc[1]) found_start = true;\r\n        else {\r\n            last = last[last.length - 1];\r\n        }\r\n    }\r\n    return path;\r\n}\r\nexport const draw_path = async (Grid, path, i, type) => {\r\n    const newGrid = Grid.slice();\r\n    if (i > 0 && i < path.length - 1) {\r\n        const x = path[i][0];\r\n        const y = path[i][1]\r\n        // console.log(newGrid[x][y])\r\n        if (type === \"visited\") {\r\n            newGrid[x][y] = <Node\r\n                isWall={false}\r\n                isStart={Grid[x][y].props.isStart}\r\n                isEnd={Grid[x][y].props.isEnd}\r\n                isPath={false}\r\n                isVisited={true}\r\n            />;\r\n        }\r\n        else {\r\n            newGrid[x][y] = <Node\r\n                isWall={false}\r\n                isStart={Grid[x][y].props.isStart}\r\n                isEnd={Grid[x][y].props.isEnd}\r\n                isPath={true}\r\n                isVisited={false}\r\n            />;\r\n        }\r\n    }\r\n    return newGrid;\r\n\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../CSS/dropdown.css';\r\n\r\nfunction Dropdown(props) {\r\n    useEffect(() => {\r\n        setOptions(props.options) //> I'm dispatching an action here.\r\n    }, [props.options])\r\n\r\n    const [options, setOptions] = useState([]);\r\n    const [hovered, setHover] = useState(false);\r\n    const [mainValue, setMainValue] = useState(props.default);\r\n\r\n    let menuOptions=[];\r\n    for(const value of options){\r\n        menuOptions.push(<p key={value} onClick={()=>changeValue(value)} className={\"item\"}>{value}</p>)\r\n    }\r\n    \r\n    const changeValue=(value)=>{\r\n        setMainValue(value);\r\n        props.dropDownValueChanged(value);\r\n    }\r\n\r\n    return (\r\n        <div className={\"dropdownContainer\"}  onMouseEnter={() => setHover(true)} onMouseLeave={() => setHover(false)} >\r\n            <div className={\"dropdown\"}>\r\n                <p key={mainValue} className={\"value\"}>{mainValue}</p>\r\n            </div>\r\n            {hovered && (\r\n                <div className={\"subMenu\"}>\r\n                    {menuOptions}\r\n                </div>\r\n            )}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Dropdown;","import Node from '../Components/Node';\r\n\r\n\r\nexport const verticalMaze = (startLoc, endLoc, grid) => {\r\n    let notWall_i = 0;\r\n    for (let i = 0; i < grid.length; i++) {\r\n        notWall_i++;\r\n        console.log(\"notwall_i=\",notWall_i)\r\n        for (let j = 0; j < grid[i].length; j+=2) {\r\n            if((i==startLoc[0] && j==startLoc[1]) || (i==endLoc[0] && j==endLoc[1])) continue;\r\n            if (i!==j) {\r\n                grid[i][j] = <Node\r\n                    isWall={true}\r\n                    isStart={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isEnd={false}\r\n                />;\r\n            }\r\n        }\r\n        \r\n    }\r\n    console.log(\"grid=\",grid);\r\n    return grid;\r\n}\r\n\r\nexport const hosssrizontalMaze = (startLoc, endLoc, grid) => {\r\n    let notWall_i = 0;\r\n    let notWall_j = 0;\r\n    for (let i = 0; i < grid.length; i += 2) {\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            if((i==startLoc[0] && j==startLoc[1]) || (i==endLoc[0] && j==endLoc[1])) continue;\r\n            if (i !==j) {\r\n                grid[i][j] = <Node\r\n                    isWall={true}\r\n                    isStart={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isEnd={false}\r\n                />;\r\n            }\r\n        }\r\n    }\r\n    return grid;\r\n}\r\n\r\nexport const horizontalMaze = (startLoc, endLoc, grid) => {\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            if((i==startLoc[0] && j==startLoc[1]) || (i==endLoc[0] && j==endLoc[1])) continue;\r\n            if (maze_1[i][j]===1) {\r\n                grid[i][j] = <Node\r\n                    isWall={true}\r\n                    isStart={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isEnd={false}\r\n                />;\r\n            }\r\n        }\r\n    }\r\n    return grid;\r\n}\r\nconst maze=[\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\r\n]\r\n\r\nconst maze_1=[\r\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\r\n    [0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0],\r\n    [0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1],\r\n    [0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],\r\n    [1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1],\r\n    [0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1],\r\n    [0,0,1,0,1,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0],\r\n    [0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,0,1,0,1,1,1,1],\r\n    [0,0,1,1,1,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0],\r\n    [0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0],\r\n    [0,1,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,0],\r\n    [0,1,0,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,0,0],\r\n    [0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,1,1,1,1,0],\r\n    [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0],\r\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]\r\n]","import React, { useState, useEffect } from 'react';\r\nimport Node from './Node';\r\nimport '../CSS/grid.css';\r\n\r\nexport default function ColourCode(props) {\r\n    return (\r\n        <div className=\"keySet\">\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={true}\r\n                    isEnd={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>Wall</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isStart={true}\r\n                    \r\n                />\r\n                <h3>Start</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={true}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>End</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={false}\r\n                    isPath={false}\r\n                    isVisited={true}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>Visited</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={false}\r\n                    isPath={true}\r\n                    isVisited={false}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>Path</h3>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\n\nimport './CSS/grid.css';\nimport Node from './Components/Node';\nimport { findPath } from './algorithms/a_star_search';\nimport { dijkstra_algorithm } from './algorithms/dijkstra';\nimport { bfs } from './algorithms/breadth_first';\nimport { dfs } from './algorithms/depth_first';\nimport { best_first } from './algorithms/best_first';\nimport { bidirectional } from './algorithms/bidirectional_search';\nimport { timeout, find_path_from_closed, draw_path } from './Helpers/path_finder';\nimport Dropdown from './Components/Dropdown';\nimport { verticalMaze, horizontalMaze } from './Helpers/maze_creation';\nimport ColourCode from './Components/ColourCode';\n\n\n\n\nfunction App() {\n\n  const [Grid, setGrid] = useState([]);\n  const [mouseDown, setMouseDown] = useState(false);\n  const [startLoc, setStartLoc] = useState([5, 5]);\n  const [endLoc, setEndLoc] = useState([5, 15]);\n  const [startDrag, setStartDrag] = useState(false);\n  const [endDrag, setEndDrag] = useState(false);\n  const [gridPath, setPath] = useState([]);\n  const [visitedPath, setVisited] = useState([]);\n  const [chosenAlgorithm, setAlgorithm] = useState(\"\");\n  const [chosenDirection, setDirection] = useState(\"\");\n\n\n  useEffect(() => {\n    setGrid(createGrid());\n\n  }, []);\n\n  const ROWS = 15;\n  const COLS = 45;\n\n  const createGrid = () => {\n\n    let grid = [];\n    for (let y = 0; y < ROWS; y++) {\n      grid.push([]);\n      for (let x = 0; x < COLS; x++) {\n        grid[y].push(\n          <Node\n            handleMouseDown={() => handleMouseDown(x, y)}\n            handleMouseEnter={() => handleMouseEnter(x, y)}\n            handleMouseUp={() => handleMouseUp()}\n            isWall={false} />\n        );\n      }\n    }\n    grid[startLoc[0]][startLoc[1]] = <Node\n      isWall={false}\n      isStart={true}\n      isEnd={false}\n      isPath={false}\n      isVisited={false}\n      handleMouseDown={() => handleMouseDown(startLoc[0], startLoc[1])}\n      handleMouseEnter={() => handleMouseEnter(startLoc[0], startLoc[1])}\n      handleMouseUp={() => handleMouseUp(startLoc[0], startLoc[1])}\n    />;\n    grid[endLoc[0]][endLoc[1]] = <Node\n      isWall={false}\n      isStart={false}\n      isPath={false}\n      isVisited={false}\n      isEnd={true}\n      handleMouseDown={() => handleMouseDown(endLoc[0], endLoc[1])}\n      handleMouseEnter={() => handleMouseEnter(endLoc[0], endLoc[1])}\n      handleMouseUp={() => handleMouseUp(endLoc[0], endLoc[1])}\n    />;\n\n    return grid;\n  }\n\n\n  const handleMouseDown = (x, y) => {\n    if (x === null || y === null || x < 0 || y < 0) return;\n    // console.log(\"mouse down at\", x, \",\", y);\n    setMouseDown(true);\n    console.log(\"start drag-------------x,y=\", x, \",\", y);\n    console.log(\"start drag-------------startLoc0,startLoc1=\", startLoc[0], \",\", startLoc[1]);\n    if (x == startLoc[0] && y == startLoc[1]) {\n      setStartDrag(true);\n    }\n    else if (x == endLoc[0] && y == endLoc[1]) {\n      setEndDrag(true);\n    }\n    else {\n      // else setStartDrag(false);\n      let newGrid = Grid.slice();\n      if (newGrid[x][y].props.isStart || newGrid[x][y].props.isEnd) return;\n      // console.log(\"boolean=\", newGrid[x][y].props.isWall)\n      newGrid[x][y] =\n        <Node\n          key={y}\n          handleMouseDown={() => handleMouseDown(x, y)}\n          handleMouseEnter={() => handleMouseEnter(x, y)}\n          handleMouseUp={() => handleMouseUp(x, y)}\n          isWall={!newGrid[x][y].props.isWall} />\n\n      // console.log(\"new grid[\", x, \"][\", y, \"]=\", newGrid[x][y])\n      setGrid(newGrid)\n    }\n\n  }\n\n  //if moving start or end we want to retain previous wall position\n  /**\n   * oldGrid=grid\n   * if(start or end)\n   *    \n   */\n  const handleMouseEnter = (x, y) => {\n    if (x === null || y === null || x < 0 || y < 0) return;\n    if (x === endLoc[0] && y === endLoc[1]) return;\n    if (x === startLoc[0] && y === startLoc[1]) return;\n    if (mouseDown) {\n      let newGrid = Grid.slice();\n      if (!startDrag && !endDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            handleMouseDown={() => handleMouseDown(x, y)}\n            handleMouseEnter={() => handleMouseEnter(x, y)}\n            handleMouseUp={() => handleMouseUp(x, y)}\n            isStart={false}\n            isPath={false}\n            isVisited={false}\n            isWall={!newGrid[x][y].props.isWall} />\n      }\n      if (startDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            handleMouseDown={() => handleMouseDown(x, y)}\n            handleMouseEnter={() => handleMouseEnter(x, y)}\n            handleMouseUp={() => handleMouseUp(x, y)}\n            isStart={true}\n            isWall={newGrid[x][y].props.isWall} />\n        newGrid[startLoc[0]][startLoc[1]] = <Node\n          isWall={newGrid[startLoc[0]][startLoc[1]].props.isWall}\n          isStart={false}\n          isEnd={false}\n          isPath={false}\n          isVisited={false}\n          handleMouseDown={() => handleMouseDown(x, y)}\n          handleMouseEnter={() => handleMouseEnter(x, y)}\n          handleMouseUp={() => handleMouseUp(x, y)}\n        />;\n        setStartLoc([x, y])\n      }\n      else if (endDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            handleMouseDown={() => handleMouseDown(x, y)}\n            handleMouseEnter={() => handleMouseEnter(x, y)}\n            handleMouseUp={() => handleMouseUp(x, y)}\n            isStart={false}\n            isEnd={true}\n            isWall={newGrid[x][y].props.isWall}\n            isPath={false}\n            isVisited={false} />\n        newGrid[endLoc[0]][endLoc[1]] = <Node\n          isWall={newGrid[endLoc[0]][endLoc[1]].props.isWall}\n          isStart={false}\n          isEnd={false}\n          isPath={false}\n          isVisited={false}\n          handleMouseDown={() => handleMouseDown(x, y)}\n          handleMouseEnter={() => handleMouseEnter(x, y)}\n          handleMouseUp={() => handleMouseUp(x, y)}\n        />;\n        console.log(\"set wall at endloc=\", endLoc);\n        setEndLoc([x, y])\n\n\n      }\n      setGrid(newGrid)\n    }\n\n\n\n  }\n  const handleMouseUp = (x, y) => {\n    if (x === null || y === null || x < 0 || y < 0) return;\n    setMouseDown(false);\n    if (startDrag) {\n      setStart(x, y)\n    }\n    else if (endDrag) {\n      // setEnd(x,y);\n    }\n    setStartDrag(false);\n    setEndDrag(false);\n  }\n  const dijkstra = async () => {\n    let closed_nodes = dijkstra_algorithm(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n\n    clear_visited_path();\n    clear_old_path(gridPath);\n    setVisited(closed_nodes);\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    await find_path_from_closed_helper(closed_nodes);\n  }\n  const BFS = async () => {\n    let closed_nodes = bfs(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    // console.log(\"BFS closed=\", closed_nodes);\n    clear_visited_path();\n    clear_old_path(gridPath);\n    setVisited(closed_nodes);\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    await find_path_from_closed_helper(closed_nodes);\n  }\n  const bidirectional_search = async () => {\n    let closed_nodes = bidirectional(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    console.log(\"bi-path=\",closed_nodes);\n    clear_visited_path();\n    clear_old_path(gridPath);\n    setVisited(closed_nodes);\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    \n    let final_path = findPath(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    find_path_from_closed_helper(final_path);\n  }\n\n  const best_first_search = async () => {\n    let closed_nodes = best_first(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    clear_visited_path();\n    clear_old_path(gridPath);\n    setVisited(closed_nodes);\n    // console.log(\"length=\", closed_nodes.length);\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    await find_path_from_closed_helper(closed_nodes);\n  }\n  const DFS = async () => {\n    let closed_nodes = dfs(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    clear_visited_path();\n    clear_old_path(gridPath);\n    setVisited(closed_nodes);\n    // console.log(\"length=\", closed_nodes.length);\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    await draw_path_helper(closed_nodes, 1, \"path\");\n  }\n  const aStarSearch =async () => {\n    clear_visited_path();\n    clear_old_path(gridPath);\n    let closed_nodes = findPath(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    setVisited(closed_nodes);\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    find_path_from_closed_helper(closed_nodes);\n  }\n  const find_path_from_closed_helper = async (closed_nodes) => {\n    let path = await find_path_from_closed(closed_nodes, startLoc);;\n    setPath(path);\n    console.log(\"path==================\", path);\n    await draw_path_helper(path, 1, \"path\");\n  }\n  const clear_visited_path = () => {\n    const newGrid = Grid.slice();\n    for (let i = 1; i < visitedPath.length - 1; i++) {\n      const x = visitedPath[i][0];\n      const y = visitedPath[i][1]\n      newGrid[x][y] = <Node\n        isWall={Grid[x][y].props.isWall}\n        isStart={Grid[x][y].props.isStart}\n        isEnd={Grid[x][y].props.isEnd}\n        isPath={false}\n        isVisited={false}\n      />;\n    }\n    setGrid(newGrid);\n  }\n  const clear_old_path = (path) => {\n    const newGrid = Grid.slice();\n\n    for (let i = 1; i < path.length - 1; i++) {\n      const x = path[i][0];\n      const y = path[i][1]\n      newGrid[x][y] = <Node\n        isWall={Grid[x][y].props.isWall}\n        isStart={Grid[x][y].props.isStart}\n        isEnd={Grid[x][y].props.isEnd}\n        isPath={false}\n        isVisited={false}\n\n      />;\n    }\n    setGrid(newGrid);\n  }\n\n\n  const draw_path_helper = async (path, i, type) => {\n    if (i>0 && i < path.length - 1) {\n      let newGrid = await draw_path(Grid, path, i, type)\n      setGrid(newGrid);\n      await timeout(5);\n      await draw_path_helper(path, i + 1, type);\n    }\n  }\n\n\n\n\n\n  const setStart = (x, y) => {\n    const newGrid = Grid.slice();// doing a deep copy of the array\n    newGrid[startLoc[0]][startLoc[1]] = <Node\n      isWall={false}\n      isStart={true}\n      isEnd={false}\n      isPath={false}\n      isVisited={false}\n      handleMouseDown={() => handleMouseDown(x, y)}\n      handleMouseEnter={() => handleMouseEnter(x, y)}\n      handleMouseUp={() => handleMouseUp(x, y)}\n    />;\n    newGrid[endLoc[0]][endLoc[1]] = <Node\n      isWall={false}\n      isStart={false}\n      isPath={false}\n      isVisited={false}\n      isEnd={true}\n      handleMouseDown={() => handleMouseDown(x, y)}\n      handleMouseEnter={() => handleMouseEnter(x, y)}\n      handleMouseUp={() => handleMouseUp(x, y)}\n    />;\n    setGrid(newGrid);\n\n  }\n  const clearWalls = () => {\n    let grid = [];\n    for (let y = 0; y < ROWS; y++) {\n      grid.push([]);\n      for (let x = 0; x < COLS; x++) {\n        grid[y].push(\n          <Node\n            handleMouseDown={() => handleMouseDown(x, y)}\n            handleMouseEnter={() => handleMouseEnter(x, y)}\n            handleMouseUp={() => handleMouseUp(x, y)}\n            isWall={false}\n            isPath={false}\n            isVisited={false}\n            isStart={Grid[y][x].props.isStart}\n            isEnd={Grid[y][x].props.isEnd} />\n        );\n      }\n    }\n    setGrid(grid);\n  }\n  const algorithmOptions = [\n    'A* star', 'Dijkstra', 'Depth-First Search', 'Breadth-First Search', 'Best-First Search', 'bidirectional_search'\n  ];\n  const directionOptions = [\n    '4-Directional', '6-Directional'\n  ]\n  const startAlgorithm = () => {\n    if (chosenAlgorithm === \"A* star\") {\n      aStarSearch()\n    }\n    else if (chosenAlgorithm === \"Dijkstra\") {\n      dijkstra()\n    }\n    else if (chosenAlgorithm === \"Breadth-First Search\") {\n      BFS()\n    }\n    else if (chosenAlgorithm === \"Depth-First Search\") {\n      DFS()\n    }\n    else if (chosenAlgorithm === \"Best-First Search\") {\n      best_first_search();\n    }\n    else if (chosenAlgorithm === \"bidirectional_search\") bidirectional_search();\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"buttonGroup\">\n        <Dropdown options={algorithmOptions} default={\"Search Algorithm\"}\n          dropDownValueChanged={(value) => setAlgorithm(value)}\n        />\n        <button className=\"startButton\" onClick={() => startAlgorithm()}>Start {chosenAlgorithm}</button>\n        <button className=\"button\" onClick={() => clearWalls()}>Clear Walls</button>\n        <Dropdown options={directionOptions} default={\"6-Directional\"}\n          dropDownValueChanged={(value) => setDirection(value)}\n        />\n        <button className=\"button\" onClick={() => setGrid(horizontalMaze(startLoc, endLoc, Grid.slice()))}>horizontalMaze</button>\n        <button className=\"button\" onClick={() => setGrid(verticalMaze(startLoc, endLoc, Grid.slice()))}>verticalMaze</button>\n      </div>\n      <div className=\"container\">\n        {Grid.map((row, yIndex) => {\n          return (\n            <div key={yIndex} className={\"row\"}>\n              {row.map((node, xIndex) => {\n                return (\n                  <Node\n                    key={xIndex}\n                    isWall={node.props.isWall}\n                    isEnd={node.props.isEnd}\n                    isPath={node.props.isPath}\n                    isVisited={node.props.isVisited}\n                    isStart={node.props.isStart}\n                    handleMouseDown={() => handleMouseDown(yIndex, xIndex)}\n                    handleMouseEnter={() => handleMouseEnter(yIndex, xIndex)}\n                    handleMouseUp={() => handleMouseUp(yIndex, xIndex)}\n                  />\n                )\n\n              })}\n            </div>\n          )\n\n        })}\n        <ColourCode />\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}