{"version":3,"sources":["Components/Node.js","algorithms/bidirectional_search.js","algorithms/common_methods/methods.js","Components/binaryHeap.js","algorithms/a_star_search.js","algorithms/dijkstra.js","algorithms/breadth_first.js","algorithms/depth_first.js","algorithms/best_first.js","Helpers/path_finder.js","Components/Dropdown.js","Helpers/maze_creation.js","Components/ColourCode.js","Components/Results.js","Helpers/gridMethods.js","Components/dropdownOptions.js","App.js","reportWebVitals.js","index.js"],"names":["Node","intersect","props","x","y","useEffect","setWall","isWall","setStart","isStart","setEnd","isEnd","setPath","isPath","setVisited","isVisited","useState","className","undefined","handleMouseEnter","onMouseDown","handleMouseDown","onMouseEnter","onMouseUp","handleMouseUp","getEightNeighbours","node","ROWS","COLS","neighbours","push","getFourNeighbours","BinaryHeap","this","values","length","element","index","current","parentIndex","Math","floor","parent","i","splice","min","end","pop","leftChildIndex","rightChildIndex","leftChild","rightChild","swap","leftPriority","rightPriority","currentPriority","a_star_search","startLoc","endLoc","Grid","chosenDirection","console","log","open_nodes","add","closed_nodes","node_lowest_cost","peekMin","indexOf","neighbour","isDiagonal","g_score","h_score","f_score","parent_g_cost","distance_from_end","contains","get","remove","last_closed","abs","discovered_nodes","dijkstra_algorithm","visited","unvisited","removeMin","cost","update_cost","previous","visitedNode","bfs","removed","queue","head","shift","dfs","stack","best_first","visitedNeighbour","sqrt","bidirectional","startResult","endResult","start_queue","end_queue","updateStart","update_queue","updateEnd","timeout","delay","Promise","res","setTimeout","find_path_from_closed","a","path","found_start","last","unshift","findPathBidirectional","targetNode","intersectOne","one","backTrack","two","concat","list","iterator","draw_path","type","newGrid","slice","Dropdown","setOptions","options","hovered","setHover","default","mainValue","setMainValue","menuOptions","value","onClick","changeValue","dropDownValueChanged","onMouseLeave","setChosenMap","choice","toLowerCase","loopMap","maze_1","maze_2","boxes","ColourCode","Results","content","setBody","body","chosenAlgorithm","timeTaken","round","performance","now","startTime","split","map","line","algorithmOptions","directionOptions","mazeOptions","App","setGrid","setStartLoc","setEndLoc","MouseDown","setMouseDown","startDrag","setStartDrag","endDrag","setEndDrag","isRunning","setRunning","wantStop","gridPath","visitedPath","setAlgorithm","setDirection","setStartTime","createGrid","grid","bidirectional_search","biOutput","stepsBeforeExecution","draw_path_helper","biPath","clear_visited_path","clear_old_path","stepsAfterExecution","checkEndLocExists","lastElement","find_path_from_closed_helper","startAlgorithm","createWalls","chosenMap","j","makeMaze","emptyGrid","clearWalls","arr","give2dArray","row","yIndex","xIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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G,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGjKC,EAAS,CACX,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEjKF,EAAU,CACZ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGjKG,EAAQ,CACV,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EA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","file":"static/js/main.2340a67e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../CSS/node.css';\r\n\r\nfunction Node(props) {\r\n\r\n  const x = props.x;\r\n  const y = props.y;\r\n\r\n  useEffect(() => {\r\n    setWall(props.isWall) //> I'm dispatching an action here.\r\n    setStart(props.isStart) //> I'm dispatching an action here.\r\n    setEnd(props.isEnd)\r\n    setPath(props.isPath)\r\n    setVisited(props.isVisited)\r\n  }, [props.isWall, props.isStart, props.isEnd, props.isPath, props.isVisited])\r\n\r\n  const [isWall, setWall] = useState(false);\r\n  const [isStart, setStart] = useState(false);\r\n  const [isEnd, setEnd] = useState(false);\r\n  const [isPath, setPath] = useState(false);\r\n  const [isVisited, setVisited] = useState(false);\r\n\r\n\r\n  let className = \"node\";\r\n  if (isEnd === true) {\r\n    className = \"end\";\r\n  }\r\n  else if (isStart === true) {\r\n    className = \"start\";\r\n  }\r\n  else if (isWall === true) {\r\n    className = \"wall\";\r\n  }\r\n  else if (isVisited === true) {\r\n    className = \"visited\";\r\n  }\r\n  else if (isPath === true) {\r\n    className = \"path\";\r\n  }\r\n  else {\r\n    className = \"node\";\r\n  }\r\n\r\n  let mainBody=<div className={className} />;\r\n  if (props.handleMouseEnter === undefined) {\r\n    mainBody = <div className={className} />\r\n  }\r\n  else {\r\n    mainBody = <div\r\n      onMouseDown={() => props.handleMouseDown(x, y)}\r\n      onMouseEnter={() => props.handleMouseEnter(x, y)}\r\n      onMouseUp={() => props.handleMouseUp()}\r\n      className={className} />\r\n  }\r\n  return (\r\n    mainBody\r\n  );\r\n}\r\n\r\nexport default Node;\r\n","import { getFourNeighbours, getEightNeighbours } from './common_methods/methods';\r\n\r\nlet removed = [];\r\nlet intersect;\r\nexport const bidirectional = (ROWS, COLS, startLoc, endLoc, Grid, chosenDirection) => {\r\n    removed=[];\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    //                 -------Node------------ | Cost | Previous\r\n    \r\n    let start_queue = [[startLoc[0], startLoc[1], 0, null]];\r\n    let end_queue = [[endLoc[0], endLoc[1], 0, null]];\r\n    let startResult,endResult\r\n\r\n    while (start_queue.length > 0) {\r\n\r\n        const updateStart=update_queue(start_queue,ROWS,COLS,Grid,chosenDirection);\r\n        start_queue=updateStart[0];\r\n        startResult=updateStart[1];\r\n\r\n        const updateEnd=update_queue(end_queue,ROWS,COLS,Grid,chosenDirection);\r\n        end_queue=updateEnd[0];\r\n        endResult=updateEnd[1];\r\n                \r\n        if(startResult || endResult){\r\n            console.log(\"removed before=\", [removed,(intersect[0],intersect[1])]);\r\n            return [removed,intersect];\r\n        } \r\n        \r\n    }\r\n    \r\n    return [removed,intersect];\r\n\r\n\r\n}\r\n\r\nconst update_queue = (queue,ROWS,COLS,Grid,chosenDirection) => {\r\n    const head = queue[0];\r\n    if (head === undefined) { console.log(\"head=undefined so break\"); queue.shift(); return queue }\r\n    \r\n    if(contains(removed,head)){\r\n        intersect=head;\r\n        console.log(\"head=\",head,\"  in queue\");\r\n        removed.push(head);\r\n        return [queue,true]\r\n    } \r\n    \r\n    let neighbours;\r\n    if (chosenDirection.indexOf(\"4\") > -1) {\r\n        neighbours = getFourNeighbours(head, ROWS, COLS);\r\n    }\r\n    else {\r\n        neighbours = getEightNeighbours(head, ROWS, COLS);\r\n    }\r\n\r\n    for (let i = 0; i < neighbours.length; i++) {\r\n        const neighbour = neighbours[i][0];\r\n        const isDiagonal = neighbours[i][1];\r\n\r\n        if (contains(queue, neighbour) || contains(removed, neighbour)) continue;\r\n        let cost = 0;\r\n        if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n            console.log(\"---------------------------------------\")\r\n            continue\r\n        }\r\n        else {\r\n            if (isDiagonal) cost = 1.41 + head[2];\r\n            else cost = 1 + head[2];\r\n        }\r\n        queue.push([neighbour[0], neighbour[1], cost, head]);\r\n        // if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n        //     removed.push(queue.shift());\r\n        //     removed.push([neighbour[0], neighbour[1], cost, head]);\r\n        //     return removed;\r\n        // }\r\n\r\n    }\r\n    removed.push(queue.shift());\r\n    return [queue,false];\r\n    // unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n\r\n","export const getEightNeighbours = (node, ROWS, COLS) => {\r\n    // node=node.value\r\n    // console.log(\"8 neighbours\");\r\n    let neighbours = [];\r\n    // console.log(\"niehgbours func node=\",node.value)\r\n    if (node[0] > 0) {\r\n        neighbours.push([[node[0] - 1, node[1]],false]);\r\n        if (node[1] > 0) {\r\n            neighbours.push([[node[0] - 1, node[1] - 1],true]);\r\n        }\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([[node[0], node[1] - 1],false]);\r\n        if (node[0] < ROWS - 1) {\r\n            neighbours.push([[node[0] + 1, node[1] - 1],true]);\r\n        }\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([[node[0] + 1, node[1]],false]);\r\n        if (node[1] < COLS - 1) {\r\n            neighbours.push([[node[0] + 1, node[1] + 1],true]);\r\n        }\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([[node[0], node[1] + 1],false]);\r\n        if (node[0] > 0) {\r\n            neighbours.push([[node[0] - 1, node[1] + 1],true]);\r\n        }\r\n    }\r\n\r\n    return neighbours;\r\n}\r\nexport const getFourNeighbours = (node, ROWS, COLS) => {\r\n    let neighbours = [];\r\n    if (node[0] > 0) {\r\n        neighbours.push([[node[0] - 1, node[1]],false]);\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([[node[0], node[1] - 1],false]);\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([[node[0] + 1, node[1]],false]);\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([[node[0], node[1] + 1],false]);\r\n    }\r\n\r\n    return neighbours;\r\n\r\n}","/*\r\n                1\r\n            2       3\r\n        \r\n\r\n \r\n*/\r\n\r\n\r\n\r\nexport default class BinaryHeap {\r\n    constructor() {\r\n        this.values = [];\r\n    }\r\n    length() {\r\n        return this.values.length;\r\n    }\r\n    add(element) {\r\n        this.values.push(element);\r\n        let index = this.values.length - 1;\r\n        const current = this.values[index];\r\n\r\n        while (index > 0) {\r\n            let parentIndex = Math.floor((index - 1) / 2);\r\n            let parent = this.values[parentIndex];\r\n\r\n            const parentPriority = parent[parent.length - 2];\r\n            const currentPriority = current[current.length - 2];\r\n\r\n            if (parentPriority > currentPriority) {\r\n                this.values[parentIndex] = current;\r\n                this.values[index] = parent;\r\n                index = parentIndex;\r\n            } else break;\r\n        }\r\n    }\r\n    remove(node) {\r\n        for (let i = 0; i < this.values.length; i++) {\r\n            const current = this.values[i];\r\n            if (current[0] === node[0] && current[1] === node[1]) {\r\n                this.values.splice(i,1);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    get(node) {\r\n        for (let i = 0; i < this.values.length; i++) {\r\n            const current = this.values[i];\r\n            if (current[0] === node[0] && current[1] === node[1]) {\r\n                return current;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    contains(node) {\r\n        for (let i = 0; i < this.values.length; i++) {\r\n            const current = this.values[i];\r\n            if (current[0] === node[0] && current[1] === node[1]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    peekMin() {\r\n        if (this.values.length > 0) return this.values[0];\r\n        return -1;\r\n    }\r\n    removeMin() {\r\n        const min = this.values[0];\r\n        const end = this.values.pop();\r\n        this.values[0] = end;\r\n\r\n        let index = 0;\r\n        const length = this.values.length;\r\n        const current = this.values[0];\r\n        while (true) {\r\n            let leftChildIndex = 2 * index + 1;\r\n            let rightChildIndex = 2 * index + 2;\r\n            let leftChild, rightChild;\r\n            let swap = null;\r\n\r\n            let leftPriority,rightPriority;\r\n            let currentPriority = current[current.length - 2];\r\n\r\n            if (leftChildIndex < length) {\r\n                leftChild = this.values[leftChildIndex];\r\n                leftPriority = leftChild[leftChild.length - 2];\r\n                currentPriority = current[current.length - 2];\r\n                if (leftPriority < currentPriority) swap = leftChildIndex;\r\n            }\r\n            if (rightChildIndex < length) {\r\n                rightChild = this.values[rightChildIndex];\r\n                leftPriority = leftChild[leftChild.length - 2];\r\n                rightPriority = rightChild[rightChild.length - 2]; \r\n                if (\r\n                    (swap === null && rightPriority < currentPriority) ||\r\n                    (swap !== null && rightPriority < leftPriority)\r\n                )\r\n                    swap = rightChildIndex;\r\n            }\r\n\r\n            if (swap === null) break;\r\n            this.values[index] = this.values[swap];\r\n            this.values[swap] = current;\r\n            index = swap;\r\n        }\r\n\r\n        return min;\r\n    }\r\n}","\r\nimport { getFourNeighbours, getEightNeighbours } from './common_methods/methods';\r\nimport BinaryHeap from '../Components/binaryHeap';\r\n\r\n\r\n\r\n\r\n/*\r\n        list        heap\r\nadd     1           O(logN)\r\nfindMin O(N)        O(1)\r\ncontains O(N)       o(N)\r\n\r\n*/\r\n\r\nexport const a_star_search = (ROWS, COLS, startLoc, endLoc, Grid, chosenDirection) => {\r\n    console.log(\"rows=\", ROWS, \" cols=\", COLS, \" startLoc=\", startLoc, \"  endloc=\", endLoc, \"  grid=\", Grid);\r\n\r\n    let open_nodes = new BinaryHeap();\r\n    open_nodes.add([startLoc[0], startLoc[1], 0, 0, 0])\r\n    let closed_nodes = [];\r\n\r\n    while (open_nodes.length() >0 && open_nodes.length() < 2000) {\r\n\r\n        const node_lowest_cost = open_nodes.peekMin();\r\n\r\n        if (node_lowest_cost === undefined) break;\r\n\r\n        console.log(\"lowest=\", node_lowest_cost);\r\n        console.log(\"chosen from\", open_nodes);\r\n\r\n        \r\n        let neighbours;\r\n        if (chosenDirection.indexOf(\"4\") > -1) {\r\n            neighbours = getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else {\r\n            neighbours = getEightNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        // console.log(\"neighbours================\", neighbours);\r\n        \r\n        \r\n\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal = neighbours[i][1];\r\n            let g_score, h_score, f_score = 0;\r\n\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue;\r\n            }\r\n            else {\r\n                const parent_f_cost=node_lowest_cost[node_lowest_cost.length-2];\r\n                const parent_g_cost=node_lowest_cost[3];\r\n\r\n                if (isDiagonal) g_score = parent_g_cost + 2.4;\r\n                else g_score = parent_g_cost + 2;\r\n                h_score = distance_from_end(neighbour, endLoc);\r\n                f_score = g_score + h_score;\r\n            }\r\n\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                closed_nodes.push(node_lowest_cost);\r\n                closed_nodes.push([neighbour[0], neighbour[1], h_score, g_score, f_score,node_lowest_cost]);\r\n                console.log(\"end found at:\", endLoc);\r\n                return closed_nodes;\r\n            }\r\n            \r\n            if(!contains(closed_nodes, neighbour)){\r\n                if(!open_nodes.contains(neighbour)){\r\n                    open_nodes.add([neighbour[0], neighbour[1], h_score, g_score, f_score, node_lowest_cost]);\r\n                }\r\n                else{\r\n                    const visitedNeighbour=open_nodes.get(neighbour);\r\n                    const visited_g_score=visitedNeighbour[3];\r\n                    if(visited_g_score>g_score){\r\n                        // new path is better\r\n                        open_nodes.remove(neighbour);\r\n                        open_nodes.add([neighbour[0], neighbour[1], h_score, g_score, f_score, node_lowest_cost]);\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     closed_nodes.push(node_lowest_cost);\r\n            //     return closed_nodes;\r\n            // }\r\n            \r\n\r\n           \r\n        }\r\n        open_nodes.remove(node_lowest_cost);\r\n        if (!contains(closed_nodes, node_lowest_cost)) {\r\n            closed_nodes.push(node_lowest_cost);\r\n        }\r\n        if (closed_nodes.length > 0) {\r\n            const last_closed = closed_nodes[closed_nodes.length - 1];\r\n            if (last_closed[0] === endLoc[0] && last_closed[1] === endLoc[1]) {\r\n                return closed_nodes;\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    return closed_nodes;\r\n\r\n}\r\n\r\n\r\nconst distance_from_end = (node, endLoc) => {\r\n    //  console.log(\"distance end====================================\",node,\"  endLoc=\",endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n// export const a_star_search = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n//     console.log(\"rows=\",ROWS,\" cols=\",COLS,\" startLoc=\",startLoc,\"  endloc=\",endLoc,\"  grid=\",Grid);\r\n\r\n//     let open_nodes = [[startLoc[0], startLoc[1], 0, 0, 0]];\r\n//     let closed_nodes = [];\r\n\r\n//     while (open_nodes.length > 0 && open_nodes.length < 20000) {\r\n\r\n//         const node_lowest_cost = find_lowest_node(open_nodes, closed_nodes);\r\n//         if (node_lowest_cost === undefined) break;\r\n\r\n//         // console.log(\"lowest=\", node_lowest_cost);\r\n//         // console.log(\"chosen from\", open_nodes);\r\n\r\n//         let neighbours;\r\n//         if(chosenDirection.indexOf(\"4\")>-1){\r\n//             neighbours= getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n//         }\r\n//         else{\r\n//             neighbours= getEightNeighbours(node_lowest_cost, ROWS, COLS);\r\n//         }\r\n//         // console.log(\"neighbours================\",neighbours);\r\n//         for (let i = 0; i < neighbours.length; i++) {\r\n//             const neighbour = neighbours[i][0];\r\n//             const isDiagonal=neighbours[i][1];\r\n//             let g_score, h_score, f_score = 0;\r\n\r\n//             if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n//                 continue;\r\n//                 // console.log(\"isWall\")\r\n//                 // g_score = 10000;\r\n//                 // h_score = 10000;\r\n//                 // f_score = g_score + h_score;\r\n//             }\r\n//             else {\r\n//                 if(isDiagonal) g_score = node_lowest_cost[2] + 2.4;\r\n//                 else g_score = node_lowest_cost[2] + 2;\r\n\r\n//                 h_score = distance_from_end(neighbour,endLoc);\r\n//                 f_score = g_score + h_score;\r\n//             }\r\n\r\n\r\n//             if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n//                 closed_nodes.push(node_lowest_cost);\r\n//                 closed_nodes.push([neighbour[0], neighbour[1], f_score, h_score, g_score, node_lowest_cost]);\r\n//                 console.log(\"end found at:\",endLoc);\r\n//                 return closed_nodes;\r\n//             }\r\n\r\n//             if (contains(open_nodes, neighbour)) {\r\n//                 // if (distance_from_start(neighbour) <= f_score) console.log(\"1st if \", neighbour);\r\n//             }\r\n//             else if (contains(closed_nodes, neighbour)) {\r\n//                 // console.log(\"neighbour \", neighbour, \" in closed list\");\r\n//                 // if (distance_from_start(neighbour) <= f_score) console.log(\"2nd if \", neighbour);\r\n//                 // else {\r\n//                 // console.log(\"closed_nodes l=\", closed_nodes.length)\r\n//                 remove(closed_nodes, neighbour);\r\n//                 // console.log(\"closed_nodes AFTER l=\", closed_nodes.length);\r\n//                 open_nodes.push([neighbour[0], neighbour[1], f_score, h_score, g_score, node_lowest_cost]);\r\n//                 // }\r\n\r\n//             }\r\n//             else {\r\n//                 open_nodes.push([neighbour[0], neighbour[1], f_score, h_score, g_score, node_lowest_cost]);\r\n//             }\r\n//         }\r\n//         if (closed_nodes.length > 0) {\r\n//             const last_closed = closed_nodes[closed_nodes.length - 1];\r\n//             if (last_closed[0] === endLoc[0] && last_closed[1] === endLoc[1]) {       \r\n//                 return closed_nodes;\r\n//             }\r\n//         }\r\n//         if (!contains(closed_nodes, node_lowest_cost)) {\r\n//             closed_nodes.push(node_lowest_cost);\r\n//         }\r\n//     }\r\n\r\n//     return closed_nodes;\r\n\r\n// }\r\n\r\n\r\n//  const distance_from_end = (node,endLoc) => {\r\n//     //  console.log(\"distance end====================================\",node,\"  endLoc=\",endLoc);\r\n//     const x = Math.abs(node[0] - endLoc[0]);\r\n//     const y = Math.abs(node[1] - endLoc[1]);\r\n//     return ((x * x) + (y * y))\r\n\r\n// }\r\n\r\n\r\n//  const contains = (discovered_nodes, node) => {\r\n//     for (let i = 0; i < discovered_nodes.length; i++) {\r\n//         if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n//             return true;\r\n//         }\r\n//     }\r\n//     return false;\r\n// }\r\n\r\n//  const remove = (list, node) => {\r\n//     for (let i = 0; i < list.length; i++) {\r\n//         if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n//             return list.splice(i, 1);\r\n//         }\r\n//     }\r\n// }\r\nconst find_lowest_node = (discovered_nodes, path) => {\r\n    const copy = discovered_nodes.slice();\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_heuristic = 10000000;\r\n    let min_distance_to_end = 1000000;\r\n    let node;\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][2] < min_heuristic && !contains(path, discovered_nodes[i])) {\r\n            min_heuristic = discovered_nodes[i][2];\r\n            min_distance_to_end = discovered_nodes[i][3];\r\n            node = discovered_nodes[i];\r\n        }\r\n        else if (discovered_nodes[i][2] === min_heuristic && discovered_nodes[i][3] < min_distance_to_end && !contains(path, discovered_nodes[i])) {\r\n            min_heuristic = discovered_nodes[i][2];\r\n            min_distance_to_end = discovered_nodes[i][3];\r\n            node = discovered_nodes[i];\r\n            // console.log(\"found lowest \", node);\r\n        }\r\n    }\r\n    return node;\r\n}\r\n\r\n","import {getFourNeighbours,getEightNeighbours} from './common_methods/methods';\r\nimport BinaryHeap from '../Components/binaryHeap';\r\n\r\n\r\nexport const dijkstra_algorithm = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    //                 -------Node------------ | Cost | Previous\r\n    let visited = [];\r\n    let unvisited =new BinaryHeap();\r\n    unvisited.add([startLoc[0], startLoc[1], 0, null]);\r\n\r\n\r\n\r\n    while (unvisited.length() > 0 && unvisited.length() < 20000) {\r\n\r\n        const node_lowest_cost = unvisited.removeMin();\r\n        \r\n        if (node_lowest_cost[0] === endLoc[0] && node_lowest_cost[1] === endLoc[1]) {\r\n            visited.push(node_lowest_cost);\r\n            // visited.push([neighbour[0], neighbour[1], cost, node_lowest_cost]);\r\n            // console.log(\"end found\");\r\n            return visited;\r\n        }\r\n        \r\n        \r\n        console.log(\"low=\",node_lowest_cost);\r\n        let neighbours;\r\n        if (node_lowest_cost === undefined) { console.log(\"node_lowest=undefined so break\"); break; }\r\n        \r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getEightNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        \r\n        \r\n        \r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal=neighbours[i][1];\r\n            if (contains(visited, neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue\r\n            }\r\n            else {\r\n                if(isDiagonal) cost = 1.41 + node_lowest_cost[2];\r\n                else cost = 1 + node_lowest_cost[2];\r\n                \r\n            }\r\n            \r\n            unvisited=update_cost(neighbour, cost, node_lowest_cost, unvisited);\r\n\r\n        }\r\n        // unvisited.remove(node_lowest_cost);\r\n        // unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n        visited.push(node_lowest_cost);\r\n        // console.log(\"visited=\" + visited);\r\n        // console.log(\"not visited=\" + unvisited);\r\n\r\n\r\n    }\r\n    return visited;\r\n\r\n\r\n}\r\n\r\nconst update_cost = (node, cost, previous, unvisited) => {\r\n    \r\n    if(unvisited.contains(node)){\r\n        const visitedNode=unvisited.get(node);\r\n        const visitedCost=visitedNode[visitedNode.length-2];\r\n        if(visitedCost>cost){\r\n            unvisited.remove(node);\r\n            unvisited.add([node[0], node[1], cost, previous]);\r\n        }\r\n        \r\n    }\r\n    else unvisited.add([node[0], node[1], cost, previous]);\r\n    \r\n    return unvisited;\r\n    \r\n}\r\n\r\n// export const dijkstra_algorithm = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n//     /*\r\n//     create unvisited list\r\n//         Node | Cost (from start) | Previous node\r\n    \r\n//     1. Assign starting node cost=0\r\n//     2. Assign all other nodes cost=10000\r\n//     3. Assign none for previous for all nodes\r\n\r\n//     create visited list\r\n    \r\n//     REPEAT \r\n//     4. Choose lowest cost node - from unvisited and put into visited\r\n//     5.Get node neighbours that are unvisited\r\n//     6.Update unvisted list costs\r\n//         if current cost+new node edge cost> new node current cost\r\n//             don't update the cost\r\n//         else \r\n//             update cost and previous\r\n    \r\n//     */\r\n\r\n\r\n//     //                 -------Node------------ | Cost | Previous\r\n//     let visited = [];\r\n//     let unvisited =new BinaryHeap();\r\n//     unvisited.add([startLoc[0], startLoc[1], 0, null]);\r\n\r\n\r\n\r\n//     while (unvisited.length() > 0 && unvisited.length() < 20000) {\r\n\r\n//         const node_lowest_cost = unvisited.peekMin();\r\n        \r\n//         let neighbours;\r\n//         if (node_lowest_cost === undefined) { console.log(\"node_lowest=undefined so break\"); break; }\r\n        \r\n//         if(chosenDirection.indexOf(\"4\")>-1){\r\n//             neighbours= getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n//         }\r\n//         else{\r\n//             neighbours= getEightNeighbours(node_lowest_cost, ROWS, COLS);\r\n//         }\r\n        \r\n        \r\n        \r\n//         for (let i = 0; i < neighbours.length; i++) {\r\n//             const neighbour = neighbours[i][0];\r\n//             const isDiagonal=neighbours[i][1];\r\n//             if (contains(visited, neighbour)) continue;\r\n//             let cost = 0;\r\n//             if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n//                 continue\r\n//             }\r\n//             else {\r\n//                 if(isDiagonal) cost = 1.41 + node_lowest_cost[2];\r\n//                 else cost = 1 + node_lowest_cost[2];\r\n                \r\n//             }\r\n//             if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n//                 visited.push(node_lowest_cost);\r\n//                 visited.push([neighbour[0], neighbour[1], cost, node_lowest_cost]);\r\n//                 // console.log(\"end found\");\r\n//                 return visited;\r\n//             }\r\n//             update_cost(neighbour, cost, node_lowest_cost, unvisited);\r\n\r\n//         }\r\n//         unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n//         visited.push(node_lowest_cost);\r\n//         // console.log(\"visited=\" + visited);\r\n//         // console.log(\"not visited=\" + unvisited);\r\n\r\n\r\n//     }\r\n//     return visited;\r\n\r\n\r\n// }\r\n\r\n// const update_cost = (node, cost, previous, unvisited) => {\r\n//     let found = false;\r\n//     for (let i = 0; i < unvisited.length; i++) {\r\n//         let current = unvisited[i];\r\n//         if (current[0] == node[0] && current[1] == node[1]) {\r\n//             found = true;\r\n//             if (unvisited[2] > cost) {\r\n//                 unvisited[2] = cost;\r\n//                 unvisited[3] = previous;\r\n//                 return unvisited;\r\n//             }\r\n//         }\r\n//     }\r\n//     if (!found) unvisited.push([node[0], node[1], cost, previous]);\r\n//     return unvisited;\r\n// }\r\nconst remove_from_unvisited = (node, unvisited) => {\r\n\r\n    for (let i = 0; i < unvisited.length; i++) {\r\n        let current = unvisited[i];\r\n        if (current[0] == node[0] && current[1] == node[1]) unvisited.splice(i, 1);\r\n    }\r\n    return unvisited;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst distance_from_start = (node, startLoc) => {\r\n    const x = Math.abs(node[0] - startLoc[0]);\r\n    const y = Math.abs(node[1] - startLoc[1]);\r\n    return ((x * x) + (y * y))\r\n}\r\nconst distance_from_end = (node, endLoc) => {\r\n    // console.log(\"distance end====================================\", node, \"  endLoc=\", endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst remove = (list, node) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n            return list.splice(i, 1);\r\n        }\r\n    }\r\n}\r\nconst find_lowest_node = (unvisted) => {\r\n\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_cost = 10000000;\r\n    let node;\r\n    for (let i = 0; i < unvisted.length; i++) {\r\n        if (unvisted[i][2] < min_cost) {\r\n            min_cost = unvisted[i][2];\r\n            node = unvisted[i];\r\n        }\r\n\r\n    }\r\n    return node;\r\n}\r\n\r\n","import {getFourNeighbours,getEightNeighbours} from './common_methods/methods';\r\n\r\n\r\nexport const bfs = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    //                 -------Node------------ | Cost | Previous\r\n    let removed=[];\r\n    let queue = [[startLoc[0], startLoc[1], 0, null]];\r\n    while (queue.length>0) {\r\n\r\n        const head = queue[0];\r\n\r\n        if (head === undefined) { console.log(\"head=undefined so break\"); break; }\r\n\r\n        let neighbours;\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(head, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getEightNeighbours(head, ROWS, COLS);\r\n        }\r\n\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal=neighbours[i][1];\r\n            \r\n            if (contains(queue, neighbour) || contains(removed,neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue\r\n            }\r\n            else {\r\n                if(isDiagonal) cost = 1.41 + head[2];\r\n                else cost = 1 + head[2];\r\n                \r\n            }\r\n            queue.push([neighbour[0], neighbour[1], cost, head]);\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                removed.push(queue.shift());\r\n                removed.push([neighbour[0], neighbour[1], cost, head]);\r\n                return removed;\r\n            }  \r\n\r\n        }\r\n        removed.push(queue.shift());\r\n        // unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n     \r\n\r\n\r\n    }\r\n    return removed;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n\r\n","import {getFourNeighbours,getEightNeighbours} from './common_methods/methods';\r\n\r\n\r\nexport const dfs = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    //                 -------Node------------ | Cost | Previous\r\n    let removed=[];\r\n    let stack = [[startLoc[0], startLoc[1], 0, null]];\r\n    while (stack.length>=0 && stack.length<1000) {\r\n\r\n        const head = stack[stack.length-1];\r\n        console.log(\"stack =\",stack);\r\n        removed.push(head);\r\n        stack.splice(stack.length-1,1);\r\n        if (head === undefined) { console.log(\"head=undefined so break\"); break; }\r\n\r\n        let neighbours;\r\n\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(head, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getEightNeighbours(head, ROWS, COLS);\r\n        }\r\n        \r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal=neighbours[i][1];\r\n            //if node already in stack, then remove it and push it to the back\r\n            if (contains(removed,neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue\r\n            }\r\n            else {\r\n                if(isDiagonal) cost = 1.41 + head[2];\r\n                else cost = 1 + head[2];\r\n            }\r\n            stack.push([neighbour[0], neighbour[1], cost, head]);\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                removed.push(head);\r\n                removed.push([neighbour[0], neighbour[1], cost, head]);\r\n                return removed;\r\n            }  \r\n\r\n        }\r\n        \r\n        // unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n     \r\n\r\n\r\n    }\r\n    return removed;\r\n\r\n\r\n}\r\nconst update_cost = (node, cost, previous, unvisited) => {\r\n    let found = false;\r\n    for (let i = 0; i < unvisited.length; i++) {\r\n        let current = unvisited[i];\r\n        if (current[0] == node[0] && current[1] == node[1]) {\r\n            found = true;\r\n            if (unvisited[2] > cost) {\r\n                unvisited[2] = cost;\r\n                unvisited[3] = previous;\r\n                return unvisited;\r\n            }\r\n        }\r\n    }\r\n    if (!found) unvisited.push([node[0], node[1], cost, previous]);\r\n    return unvisited;\r\n}\r\nconst remove_from_unvisited = (node, unvisited) => {\r\n\r\n    for (let i = 0; i < unvisited.length; i++) {\r\n        let current = unvisited[i];\r\n        if (current[0] == node[0] && current[1] == node[1]) unvisited.splice(i, 1);\r\n    }\r\n    return unvisited;\r\n}\r\n\r\nconst getNeighbours = (node, ROWS, COLS) => {\r\n    // node=node.value\r\n    console.log(\"row in get neigbours=\", ROWS);\r\n    let neighbours = [];\r\n    // console.log(\"niehgbours func node=\",node.value)\r\n    //TOP\r\n    if (node[0] > 0) {\r\n        neighbours.push([node[0] - 1, node[1]]);\r\n        //Top Left\r\n        if (node[1] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] - 1]);\r\n        }\r\n    }\r\n    //LEFT\r\n    if (node[1] > 0) {\r\n        neighbours.push([node[0], node[1] - 1]);\r\n        //Bottom Left\r\n        if (node[0] < ROWS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] - 1]);\r\n        }\r\n    }\r\n    //BOTTOM\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([node[0] + 1, node[1]]);\r\n        if (node[1] < COLS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] + 1]);\r\n        }\r\n    }\r\n    //RIGHT\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([node[0], node[1] + 1]);\r\n        if (node[0] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] + 1]);\r\n        }\r\n    }\r\n    //[top,left,bottom,right]\r\n    console.log(\"neibours of:\",node,\"   =\",neighbours);\r\n    return neighbours;\r\n\r\n}\r\nconst distance_from_start = (node, startLoc) => {\r\n    const x = Math.abs(node[0] - startLoc[0]);\r\n    const y = Math.abs(node[1] - startLoc[1]);\r\n    return ((x * x) + (y * y))\r\n}\r\nconst distance_from_end = (node, endLoc) => {\r\n    // console.log(\"distance end====================================\", node, \"  endLoc=\", endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst remove = (list, node) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n            return list.splice(i, 1);\r\n        }\r\n    }\r\n}\r\nconst find_lowest_node = (unvisted) => {\r\n\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_cost = 10000000;\r\n    let node;\r\n    for (let i = 0; i < unvisted.length; i++) {\r\n        if (unvisted[i][2] < min_cost) {\r\n            min_cost = unvisted[i][2];\r\n            node = unvisted[i];\r\n        }\r\n\r\n    }\r\n    return node;\r\n}\r\n\r\n","import { getFourNeighbours, getEightNeighbours } from './common_methods/methods';\r\nimport BinaryHeap from '../Components/binaryHeap';\r\n\r\n\r\nexport const best_first = (ROWS, COLS, startLoc, endLoc, Grid, chosenDirection) => {\r\n    console.log(\"rows=\", ROWS, \" cols=\", COLS, \" startLoc=\", startLoc, \"  endloc=\", endLoc, \"  grid=\", Grid);\r\n\r\n    let open_nodes = new BinaryHeap();\r\n    open_nodes.add([startLoc[0], startLoc[1], 0, 0, 0])\r\n    let closed_nodes = [];\r\n\r\n    while (open_nodes.length() > 0 && open_nodes.length() < 2000) {\r\n\r\n        const node_lowest_cost = open_nodes.removeMin();\r\n\r\n        if (node_lowest_cost === undefined) break;\r\n\r\n        console.log(\"lowest=\", node_lowest_cost);\r\n\r\n\r\n        let neighbours;\r\n        if (chosenDirection.indexOf(\"4\") > -1) {\r\n            neighbours = getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else {\r\n            neighbours = getEightNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n\r\n\r\n\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            let h_score;\r\n\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue;\r\n            }\r\n            else {\r\n                h_score = distance_from_end(neighbour, endLoc);\r\n            }\r\n\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                closed_nodes.push(node_lowest_cost);\r\n                closed_nodes.push([neighbour[0], neighbour[1], h_score, node_lowest_cost]);\r\n                console.log(\"end found at:\", endLoc);\r\n                return closed_nodes;\r\n            }\r\n\r\n            if (open_nodes.contains(neighbour)) {\r\n                const visitedNeighbour = open_nodes.get(neighbour);\r\n                const visited_h_score = visitedNeighbour[visitedNeighbour.length - 2];\r\n                if (visited_h_score >= h_score) {\r\n                    open_nodes.remove(neighbour);\r\n                    open_nodes.add([neighbour[0], neighbour[1], h_score, node_lowest_cost]);\r\n                }\r\n            }\r\n            else if (contains(closed_nodes, neighbour)) {\r\n                continue;\r\n            }\r\n            else {\r\n                open_nodes.add([neighbour[0], neighbour[1], h_score, node_lowest_cost]);\r\n            }\r\n        }\r\n\r\n        if (!contains(closed_nodes, node_lowest_cost)) {\r\n            closed_nodes.push(node_lowest_cost);\r\n        }\r\n    }\r\n\r\n    return closed_nodes;\r\n\r\n}\r\n\r\n// export const best_first = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n//     console.log(\"rows=\",ROWS,\" cols=\",COLS,\" startLoc=\",startLoc,\"  endloc=\",endLoc,\"  grid=\",Grid);\r\n\r\n//     let open_nodes = new BinaryHeap();\r\n//     open_nodes.add([startLoc[0], startLoc[1], 0, 0, 0])\r\n//     let closed_nodes = [];\r\n\r\n//     while (open_nodes.length() > 0 && open_nodes.length() < 20000) {\r\n//         const node_lowest_cost = find_lowest_node(open_nodes, closed_nodes);\r\n//         if (node_lowest_cost === undefined) break;\r\n\r\n//         // console.log(\"lowest=\", node_lowest_cost);\r\n//         // console.log(\"chosen from\", open_nodes);\r\n\r\n\r\n//         let neighbours;\r\n\r\n//         if(chosenDirection.indexOf(\"4\")>-1){\r\n//             neighbours= getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n//         }\r\n//         else{\r\n//             neighbours= getEightNeighbours(node_lowest_cost, ROWS, COLS);\r\n//         }\r\n//         // console.log(\"neighbours================\",neighbours);\r\n//         for (let i = 0; i < neighbours.length; i++) {\r\n//             const neighbour = neighbours[i][0];\r\n//             const isDiagonal=neighbours[i][1];\r\n//             let h_score= 0;\r\n\r\n//             if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n//                 continue;\r\n//             }\r\n//             else {\r\n//                 h_score = distance_from_end(neighbour,endLoc);\r\n//             }\r\n\r\n\r\n//             if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n//                 closed_nodes.push(node_lowest_cost);\r\n//                 closed_nodes.push([neighbour[0], neighbour[1], h_score, node_lowest_cost]);\r\n//                 // console.log(\"end found\");\r\n//                 return closed_nodes;\r\n//             }\r\n\r\n//             if (contains(open_nodes, neighbour)) {\r\n//                 // if (distance_from_start(neighbour) <= f_score) console.log(\"1st if \", neighbour);\r\n//             }\r\n//             else if (contains(closed_nodes, neighbour)) {\r\n//                 // console.log(\"neighbour \", neighbour, \" in closed list\");\r\n//                 // if (distance_from_start(neighbour) <= f_score) console.log(\"2nd if \", neighbour);\r\n//                 // else {\r\n//                 // console.log(\"closed_nodes l=\", closed_nodes.length)\r\n//                 remove(closed_nodes, neighbour);\r\n//                 // console.log(\"closed_nodes AFTER l=\", closed_nodes.length);\r\n//                 open_nodes.push([neighbour[0], neighbour[1],h_score, node_lowest_cost]);\r\n//                 // }\r\n\r\n//             }\r\n//             else {\r\n//                 open_nodes.push([neighbour[0], neighbour[1], h_score, node_lowest_cost]);\r\n//             }\r\n//         }\r\n//         if (closed_nodes.length > 0) {\r\n//             const last_closed = closed_nodes[closed_nodes.length - 1];\r\n//             if (last_closed[0] === endLoc[0] && last_closed[1] === endLoc[1]) {\r\n//                 return closed_nodes;\r\n//             }\r\n//         }\r\n\r\n//         if (!contains(closed_nodes, node_lowest_cost)) {\r\n//             closed_nodes.push(node_lowest_cost);\r\n//         }\r\n\r\n//         // remove(open_nodes, node_lowest_cost);\r\n//         // console.log(\"dn=\", open_nodes);\r\n\r\n\r\n//         // break\r\n//     }\r\n//     // console.log(\"path=\", closed_nodes);\r\n\r\n//     return closed_nodes;\r\n\r\n// }\r\n\r\n\r\n\r\nconst distance_from_end = (node, endLoc) => {\r\n    //  console.log(\"distance end====================================\",node,\"  endLoc=\",endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return Math.sqrt((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst remove = (list, node) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n            return list.splice(i, 1);\r\n        }\r\n    }\r\n}\r\nconst find_lowest_node = (discovered_nodes, path) => {\r\n    const copy = discovered_nodes.slice();\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_heuristic = 10000000;\r\n    let node;\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][2] < min_heuristic && !contains(path, discovered_nodes[i])) {\r\n            min_heuristic = discovered_nodes[i][2];\r\n            node = discovered_nodes[i];\r\n        }\r\n    }\r\n    return node;\r\n}\r\n\r\n","import Node from '../Components/Node';\r\n\r\nexport function timeout(delay) {\r\n    return new Promise(res => setTimeout(res, delay));\r\n}\r\n\r\nexport const find_path_from_closed = async (closed_nodes, startLoc) => {\r\n    let path = [];\r\n    let found_start = false;\r\n    let last = closed_nodes[closed_nodes.length - 1];\r\n    while (found_start === false) {\r\n        path.unshift(last);\r\n        if (last === undefined) break;\r\n        if (last[0] === startLoc[0] && last[1] === startLoc[1]) found_start = true;\r\n        else {\r\n            last = last[last.length - 1];\r\n        }\r\n    }\r\n    console.log(\"path===\",path);\r\n    return path;\r\n}\r\nexport const findPathBidirectional = async (closed_nodes, targetNode) => {\r\n    // 1. Find 1st intersect\r\n    //Backtrack from it\r\n    let path=[];\r\n    let intersectOne;\r\n    console.log(\"targetNode=\",targetNode);\r\n    console.log(\"give list=\",closed_nodes);\r\n    for(let i=0;i<closed_nodes.length;i++){\r\n        const node=closed_nodes[i];\r\n        if(node[0]===targetNode[0] && node[1]===targetNode[1]){\r\n            intersectOne=node;\r\n            break;\r\n        }\r\n    }\r\n    console.log(\"intersectOne=\",intersectOne);\r\n    let one=backTrack(intersectOne);\r\n    let two=backTrack(targetNode);\r\n    \r\n    // let pathA=\r\n    console.log(\"one=\",one);\r\n    console.log(\"two=\",two);\r\n    return one.concat(two);\r\n}\r\nconst backTrack=(node)=>{\r\n    let list=[node];\r\n    let iterator=node;\r\n    while(iterator!==undefined && iterator[3]!==null){\r\n        list.push(iterator[3]);\r\n        iterator=iterator[3];\r\n    }\r\n    console.log(\"backTrack from node=\",node,\" is=\",list);\r\n    return list;\r\n}\r\nexport const draw_path = async (Grid, path, i, type) => {\r\n    const newGrid = Grid.slice();\r\n    if (i > 0 && i <= path.length - 1) {\r\n        const x = path[i][0];\r\n        const y = path[i][1];\r\n        if (type === \"visited\") {\r\n            newGrid[x][y] = <Node\r\n                isWall={false}\r\n                isStart={Grid[x][y].props.isStart}\r\n                isEnd={Grid[x][y].props.isEnd}\r\n                isPath={false}\r\n                isVisited={true}\r\n            />;\r\n        }\r\n        else {\r\n            newGrid[x][y] = <Node\r\n                isWall={false}\r\n                isStart={Grid[x][y].props.isStart}\r\n                isEnd={Grid[x][y].props.isEnd}\r\n                isPath={true}\r\n                isVisited={false}\r\n            />;\r\n        }\r\n    }\r\n    return newGrid;\r\n\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../CSS/dropdown.css';\r\n\r\nfunction Dropdown(props) {\r\n    useEffect(() => {\r\n        setOptions(props.options) //> I'm dispatching an action here.\r\n    }, [props.options])\r\n\r\n    const [options, setOptions] = useState([]);\r\n    const [hovered, setHover] = useState(false);\r\n    const [mainValue, setMainValue] = useState(props.default);\r\n\r\n    let menuOptions=[];\r\n    for(const value of options){\r\n        menuOptions.push(<p key={value} onClick={()=>changeValue(value)} className={\"item\"}>{value}</p>)\r\n    }\r\n    \r\n    const changeValue=(value)=>{\r\n        setMainValue(value);\r\n        props.dropDownValueChanged(value);\r\n    }\r\n\r\n    return (\r\n        <div className={\"dropdownContainer\"}  onMouseEnter={() => setHover(true)} onMouseLeave={() => setHover(false)} >\r\n            <div className={\"dropdown\"}>\r\n                <p key={mainValue} className={\"value\"}>{mainValue}</p>\r\n            </div>\r\n            {hovered && (\r\n                <div className={\"subMenu\"}>\r\n                    {menuOptions}\r\n                </div>\r\n            )}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Dropdown;","import Node from '../Components/Node';\r\n\r\nexport const makeMaze = (startLoc, endLoc, grid, chosenMap) => {\r\n    chosenMap=setChosenMap(chosenMap);\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            if ((i == startLoc[0] && j == startLoc[1]) || (i == endLoc[0] && j == endLoc[1])) continue;\r\n            if (chosenMap[i][j] !== undefined && chosenMap[i][j] === 1) {\r\n                grid[i][j] = <Node\r\n                    isWall={true}\r\n                    isStart={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isEnd={false}\r\n                />;\r\n            }\r\n        }\r\n    }\r\n    return grid;\r\n}\r\n\r\nconst setChosenMap=(choice)=>{\r\n    choice=choice.toLowerCase();\r\n    if(choice===\"loop\"){\r\n        return loopMap;\r\n    }\r\n    else if(choice===\"maze 1\"){\r\n        return maze_1;\r\n    }\r\n    else if(choice===\"maze 2\"){\r\n        return maze_2;\r\n    }\r\n    else if(choice===\"boxed\"){\r\n        return boxes;\r\n    }\r\n}\r\n\r\n\r\nconst maze = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n]\r\n\r\nconst maze_1 = [\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1],\r\n    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],\r\n    [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1],\r\n    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],\r\n    [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\r\n    [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n]\r\n\r\nconst maze_2 = [\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1],\r\n    [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1],\r\n    [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1],\r\n    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1],\r\n    [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1],\r\n    [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1],\r\n    [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1],\r\n    [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1],\r\n    [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1],\r\n    [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\r\n    [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1],\r\n    [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1],\r\n    [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n]\r\nconst loopMap = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]\r\n]\r\n\r\nconst boxes = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n]\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport Node from './Node';\r\nimport '../CSS/grid.css';\r\n\r\nexport default function ColourCode(props) {\r\n    return (\r\n        <div className=\"keySet\">\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={true}\r\n                    isEnd={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>Wall</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isStart={true}\r\n                    \r\n                />\r\n                <h3>Start</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={true}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>End</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={false}\r\n                    isPath={false}\r\n                    isVisited={true}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>Visited</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={false}\r\n                    isPath={true}\r\n                    isVisited={false}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>Path</h3>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Node from './Node';\r\nimport '../CSS/grid.css';\r\n\r\nexport default function Results(props) {\r\n\r\n    useEffect(() => {\r\n        // setStartTime(props.startTime);\r\n        if(props.content===null){\r\n            setBody(body + '\\nNo path found for: '+props.chosenAlgorithm);\r\n        }\r\n        else if (props.content.length !== 0) {\r\n            const timeTaken=Math.round((performance.now() - props.startTime)/1000 * 100) / 100\r\n            \r\n            setBody(body + '\\n'+props.chosenAlgorithm+' Algorithm & Path Length = ' + props.content.length + \" & Time Taken = \" + timeTaken+\" seconds\")\r\n        }\r\n\r\n    }, [props.content])\r\n\r\n\r\n    const [body, setBody] = useState(\"\");\r\n\r\n\r\n\r\n    return (\r\n        <div className={\"resultContainer\"}>\r\n            <h3 className={\"resultHeader\"}>Results</h3>\r\n            <div className=\"resultBody\">\r\n                {body.split('\\n').map(line => <p>{line}</p>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import Node from '../Components/Node';\r\n\r\nexport const clearEverything = (ROWS, COLS, grid) => {\r\n    for (let y = 0; y < ROWS; y++) {\r\n        for (let x = 0; x < COLS; x++) {\r\n            grid[x][y] = <Node\r\n                isWall={false}\r\n                isPath={false}\r\n                isVisited={false}\r\n                isStart={grid[y][x].props.isStart}\r\n                isEnd={grid[y][x].props.isEnd} />\r\n        }\r\n    }\r\n    return grid;\r\n}\r\nexport const clear_old_path = (path, Grid) => {\r\n    if (path === null || path === undefined) return;\r\n    const newGrid = Grid.slice();\r\n\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n        const x = path[i][0];\r\n        const y = path[i][1]\r\n        newGrid[x][y] = <Node\r\n            isWall={Grid[x][y].props.isWall}\r\n            isStart={Grid[x][y].props.isStart}\r\n            isEnd={Grid[x][y].props.isEnd}\r\n            isPath={false}\r\n            isVisited={false}\r\n\r\n        />;\r\n    }\r\n    return newGrid;\r\n}\r\nexport const clear_visited_path = (visitedPath,Grid) => {\r\n    const newGrid = Grid.slice();\r\n    for (let i = 1; i < visitedPath.length - 1; i++) {\r\n      const x = visitedPath[i][0];\r\n      const y = visitedPath[i][1]\r\n      newGrid[x][y] = <Node\r\n        isWall={Grid[x][y].props.isWall}\r\n        isStart={Grid[x][y].props.isStart}\r\n        isEnd={Grid[x][y].props.isEnd}\r\n        isPath={false}\r\n        isVisited={false}\r\n      />;\r\n    }\r\n    return newGrid;\r\n  }\r\n\r\n\r\n// export const setStart = () => {\r\n//     const newGrid = Grid.slice();// doing a deep copy of the array\r\n//     newGrid[startLoc[0]][startLoc[1]] = <Node\r\n//       isWall={false}\r\n//       isStart={true}\r\n//       isEnd={false}\r\n//       isPath={false}\r\n//       isVisited={false}\r\n//       // handleMouseDown={() => handleMouseDown(x, y)}\r\n//       // handleMouseEnter={() => handleMouseEnter(x, y)}\r\n//       // handleMouseUp={() => handleMouseUp(x, y)}\r\n//     />;\r\n//     newGrid[endLoc[0]][endLoc[1]] = <Node\r\n//       isWall={false}\r\n//       isStart={false}\r\n//       isPath={false}\r\n//       isVisited={false}\r\n//       isEnd={true}\r\n//       // handleMouseDown={() => handleMouseDown(x, y)}\r\n//       // handleMouseEnter={() => handleMouseEnter(x, y)}\r\n//       // handleMouseUp={() => handleMouseUp(x, y)}\r\n//     />;\r\n//     return newGrid;\r\n//   }\r\nexport const clearWalls = (Grid,ROWS,COLS) => {\r\n    let grid = [];\r\n    for (let y = 0; y < ROWS; y++) {\r\n      grid.push([]);\r\n      for (let x = 0; x < COLS; x++) {\r\n        grid[y].push(\r\n          <Node\r\n            // handleMouseDown={() => handleMouseDown(x, y)}\r\n            // handleMouseEnter={() => handleMouseEnter(x, y)}\r\n            // handleMouseUp={() => handleMouseUp(x, y)}\r\n            isWall={false}\r\n            isPath={false}\r\n            isVisited={false}\r\n            isStart={Grid[y][x].props.isStart}\r\n            isEnd={Grid[y][x].props.isEnd} />\r\n        );\r\n      }\r\n    }\r\n    return grid\r\n\r\n  }\r\n  export const emptyGrid = (Grid,ROWS,COLS) => {\r\n    let grid = [];\r\n    for (let y = 0; y < ROWS; y++) {\r\n      grid.push([]);\r\n      for (let x = 0; x < COLS; x++) {\r\n        grid[y].push(\r\n          <Node\r\n            isWall={false}\r\n            isPath={false}\r\n            isVisited={false}\r\n            isStart={Grid[y][x].props.isStart}\r\n            isEnd={Grid[y][x].props.isEnd} />\r\n        );\r\n      }\r\n    }\r\n    return grid;\r\n\r\n  }","export const algorithmOptions = [\r\n    'A* Search', 'Dijkstra', 'Depth-First Search', 'Breadth-First Search', 'Best-First Search', 'bidirectional_search'\r\n];\r\nexport const directionOptions = [\r\n    '4-Directional', '8-Directional'\r\n]\r\nexport const mazeOptions = [\r\n    'Loop', 'Maze 1', 'Maze 2', 'Boxed'\r\n]","import React, { useState, useEffect } from 'react';\n\nimport './CSS/grid.css';\nimport Node from './Components/Node';\nimport { a_star_search } from './algorithms/a_star_search';\nimport { dijkstra_algorithm } from './algorithms/dijkstra';\nimport { bfs } from './algorithms/breadth_first';\nimport { dfs } from './algorithms/depth_first';\nimport { best_first } from './algorithms/best_first';\nimport { bidirectional } from './algorithms/bidirectional_search';\nimport { timeout, find_path_from_closed, draw_path,findPathBidirectional } from './Helpers/path_finder';\nimport Dropdown from './Components/Dropdown';\nimport { makeMaze } from './Helpers/maze_creation';\nimport ColourCode from './Components/ColourCode';\nimport Results from './Components/Results';\nimport { clear_old_path, clear_visited_path, clearWalls, emptyGrid } from './Helpers/gridMethods';\nimport { algorithmOptions, directionOptions, mazeOptions } from './Components/dropdownOptions';\nimport BinaryHeap from './Components/binaryHeap';\n\n\n\nfunction App() {\n  // main grid, start & end points\n  const [Grid, setGrid] = useState([]);\n  const [startLoc, setStartLoc] = useState([5, 5]);\n  const [endLoc, setEndLoc] = useState([5, 15]);\n  // variables for dragging and dropping\n  const [MouseDown, setMouseDown] = useState(false);\n  const [startDrag, setStartDrag] = useState(false);\n  const [endDrag, setEndDrag] = useState(false);\n  //variables for algorithm execution\n  const [isRunning, setRunning] = useState(false);\n  const [wantStop, setStop] = useState(false);\n  const [gridPath, setPath] = useState([]);\n  const [visitedPath, setVisited] = useState([]);\n  const [chosenAlgorithm, setAlgorithm] = useState(\"\");\n  const [chosenDirection, setDirection] = useState(\"\");\n  const [startTime, setStartTime] = useState(0);\n\n \n \n  useEffect(() => {\n    setGrid(createGrid());\n  }, []);\n\n  const ROWS = 18;\n  const COLS = 55;\n\n  const createGrid = () => {\n    let grid = [];\n    for (let y = 0; y < ROWS; y++) {\n      grid.push([]);\n      for (let x = 0; x < COLS; x++) {\n        grid[y].push(\n          <Node\n            isWall={false} />\n        );\n      }\n    }\n    grid[startLoc[0]][startLoc[1]] = <Node\n      isWall={false}\n      isStart={true}\n      isEnd={false}\n      isPath={false}\n      isVisited={false}\n    />;\n    grid[endLoc[0]][endLoc[1]] = <Node\n      isWall={false}\n      isStart={false}\n      isPath={false}\n      isVisited={false}\n      isEnd={true}\n\n    />;\n\n    return grid;\n  }\n\n\n  const handleMouseDown = (x, y) => {\n    setMouseDown(true);\n    if (x === null || y === null || x < 0 || y < 0) return;\n    // console.log(\"mouse down at\", x, \",\", y);\n\n    console.log(\"start drag-------------x,y=\", x, \",\", y);\n    if (x === startLoc[0] && y === startLoc[1]) {\n      setStartDrag(true);\n    }\n    else if (x === endLoc[0] && y === endLoc[1]) {\n      setEndDrag(true);\n    }\n    else {\n      let newGrid = Grid.slice();\n      if (newGrid[x][y].props.isStart || newGrid[x][y].props.isEnd) return;\n      newGrid[x][y] =\n        <Node\n          key={y}\n          isWall={!newGrid[x][y].props.isWall} />\n      setGrid(newGrid)\n    }\n\n  }\n\n  //if moving start or end we want to retain previous wall position\n  const handleMouseEnter = (x, y) => {\n    if (x === null || y === null || x < 0 || y < 0) return;\n    if (x === endLoc[0] && y === endLoc[1]) return;\n    if (x === startLoc[0] && y === startLoc[1]) return;\n    if (MouseDown) {\n      let newGrid = Grid.slice();\n      if (!startDrag && !endDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            isStart={false}\n            isPath={false}\n            isVisited={false}\n            isWall={!newGrid[x][y].props.isWall} />\n      }\n      if (startDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            isStart={true}\n            isWall={newGrid[x][y].props.isWall} />\n\n        newGrid[startLoc[0]][startLoc[1]] = <Node\n          isWall={newGrid[startLoc[0]][startLoc[1]].props.isWall}\n          isStart={false}\n          isEnd={false}\n          isPath={false}\n          isVisited={false}\n        />;\n        setStartLoc([x, y])\n      }\n      else if (endDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            isStart={false}\n            isEnd={true}\n            isWall={newGrid[x][y].props.isWall}\n            isPath={false}\n            isVisited={false} />\n        newGrid[endLoc[0]][endLoc[1]] = <Node\n          isWall={newGrid[endLoc[0]][endLoc[1]].props.isWall}\n          isStart={false}\n          isEnd={false}\n          isPath={false}\n          isVisited={false}\n        />;\n        console.log(\"set wall at endloc=\", endLoc);\n        setEndLoc([x, y])\n\n\n      }\n      setGrid(newGrid)\n    }\n  }\n\n\n  const handleMouseUp = (x, y) => {\n    setMouseDown(false);\n    if (x === null || y === null || x < 0 || y < 0) return;\n    setStartDrag(false);\n    setEndDrag(false);\n  }\n\n\n\n  const bidirectional_search = async () => {\n    const biOutput=bidirectional(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    let closed_nodes = biOutput[0];\n    const intersect=biOutput[1];\n\n    console.log(\"bi-biOutput=\", biOutput);\n    stepsBeforeExecution(closed_nodes);\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    let biPath=await findPathBidirectional(closed_nodes,intersect);\n    console.log(\"Find path from closed=\",biPath);\n    await draw_path_helper(biPath, 1, \"path\");\n\n    // let final_path = a_star_search(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    // await checkEndLocExists(final_path);\n  }\n\n\n  const stepsBeforeExecution = (closed_nodes) => {\n    setGrid(clear_visited_path(visitedPath, Grid));\n    setGrid(clear_old_path(gridPath, Grid));\n    setVisited(closed_nodes);\n  }\n  const stepsAfterExecution = async (closed_nodes) => {\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    await checkEndLocExists(closed_nodes);\n    console.log(\"after execution--------\");\n\n  }\n  const checkEndLocExists = async (closed_nodes) => {\n    const lastElement = closed_nodes[closed_nodes.length - 1];\n    if (lastElement[0] === endLoc[0] && lastElement[1] === endLoc[1]) {\n      await find_path_from_closed_helper(closed_nodes);\n    }\n    else {\n      setPath([]); //Necessary to trigger re-render of App\n      setPath(null);\n    }\n  }\n\n  const find_path_from_closed_helper = async (closed_nodes) => {\n    let path = await find_path_from_closed(closed_nodes, startLoc);;\n    setPath(path);\n\n    await draw_path_helper(path, 1, \"path\");\n  }\n\n  // const draw_path_helper = async (path, sm, type) => {\n  //   for (let i = 1; i < path.length - 1; i++) {\n\n  //     const newGrid = Grid.slice();\n  //     const x = path[i][0];\n  //     const y = path[i][1];\n  //     if (type === \"visited\") {\n  //       newGrid[x][y] = <Node\n  //         isWall={false}\n  //         isStart={Grid[x][y].props.isStart}\n  //         isEnd={Grid[x][y].props.isEnd}\n  //         isPath={false}\n  //         isVisited={true}\n  //       />;\n  //     }\n  //     else {\n  //       newGrid[x][y] = <Node\n  //         isWall={false}\n  //         isStart={Grid[x][y].props.isStart}\n  //         isEnd={Grid[x][y].props.isEnd}\n  //         isPath={true}\n  //         isVisited={false}\n  //       />;\n  //     }\n  //     if (!wantStop) {\n  //       setGrid(newGrid);\n  //       await timeout(3);\n  //     }\n\n\n  //   }\n\n  // }\n  const draw_path_helper = async (path, i, type) => {\n    if (i > 0 && i <= path.length - 1) {\n      let newGrid = await draw_path(Grid, path, i, type)\n      setGrid(newGrid);\n      await timeout(2);\n      await draw_path_helper(path, i + 1, type);\n    }\n\n\n  }\n\n\n  const startAlgorithm = async () => {\n    if (isRunning) return;\n    setRunning(true);\n\n    setStartTime(performance.now());\n    let closed_nodes;\n    if (chosenAlgorithm === \"A* Search\") {\n      closed_nodes = a_star_search(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n      \n    }\n    else if (chosenAlgorithm === \"Dijkstra\") {\n      closed_nodes = dijkstra_algorithm(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    }\n    else if (chosenAlgorithm === \"Breadth-First Search\") {\n      closed_nodes = bfs(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    }\n    else if (chosenAlgorithm === \"Depth-First Search\") {\n      closed_nodes = dfs(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    }\n    else if (chosenAlgorithm === \"Best-First Search\") {\n      closed_nodes = best_first(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n      console.log(\"BEST closed nodes=\",closed_nodes);\n    }\n    else if (chosenAlgorithm === \"bidirectional_search\"){\n      bidirectional_search();\n    }\n\n    stepsBeforeExecution(closed_nodes);\n    await stepsAfterExecution(closed_nodes);\n    setRunning(false)\n  }\n  const stopAlgorithm = () => {\n    console.log(\"stop pressed wantStop=\", wantStop);\n  }\n\n  const createWalls = (value) => {\n    setGrid(makeMaze(startLoc, endLoc, emptyGrid(Grid, ROWS, COLS), value));\n  }\n\n\n  const give2dArray = () => {\n    let arr = [];\n    console.log(\"grid=\", Grid[0][1]);\n    for (let i = 0; i < Grid.length; i++) {\n      arr.push([]);\n      for (let j = 0; j < Grid[i].length; j++) {\n        if (Grid[i][j].props.isWall === true) {\n          arr[i].push(1);\n        }\n        else {\n          arr[i].push(0);\n        }\n      }\n      // arr.push(subArr);\n    }\n    console.log(\"arr=\", arr);\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"buttonGroup\">\n\n\n        <Dropdown options={algorithmOptions} default={\"Search Algorithm\"}\n          dropDownValueChanged={(value) =>setAlgorithm(value)}\n        />\n        {isRunning && (\n          <button className=\"startButton running\" onClick={() => stopAlgorithm()}>Running {!isRunning && chosenAlgorithm}</button>\n        )}\n        {!isRunning && (\n          <button className=\"startButton\" onClick={async () => await startAlgorithm()}>Start {chosenAlgorithm}</button>\n        )}\n        <button className=\"button\" onClick={() => setGrid(clearWalls(Grid, ROWS, COLS))}>Clear Walls</button>\n        <Dropdown options={directionOptions} default={\"8-Directional\"}\n          dropDownValueChanged={(value) => setDirection(value)}\n        />\n        <Dropdown options={mazeOptions} default={\"Select Maze\"}\n          dropDownValueChanged={(value) => createWalls(value)}\n        />\n        <button className=\"button\" onClick={() => give2dArray()}>Give 2d Arr</button>\n      </div>\n\n      <div className=\"container\">\n        {Grid.map((row, yIndex) => {\n          return (\n            <div key={yIndex} className={\"row\"}>\n              {row.map((node, xIndex) => {\n                return (\n                  <Node\n                    key={xIndex}\n                    isWall={node.props.isWall}\n                    isEnd={node.props.isEnd}\n                    isPath={node.props.isPath}\n                    isVisited={node.props.isVisited}\n                    isStart={node.props.isStart}\n                    handleMouseDown={() => handleMouseDown(yIndex, xIndex)}\n                    handleMouseEnter={() => handleMouseEnter(yIndex, xIndex)}\n                    handleMouseUp={() => handleMouseUp(yIndex, xIndex)}\n                  />\n                )\n\n              })}\n            </div>\n          )\n        })}\n        <div className={\"bottomContainer\"}>\n\n          <Results chosenAlgorithm={chosenAlgorithm} startTime={startTime} content={gridPath} />\n          <ColourCode />\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}