{"version":3,"sources":["Components/Node.js","algorithms/bidirectional_search.js","algorithms/common_methods/methods.js","Components/binaryHeap.js","algorithms/a_star_search.js","algorithms/dijkstra.js","algorithms/breadth_first.js","algorithms/depth_first.js","algorithms/best_first.js","Helpers/path_finder.js","Components/Dropdown.js","Helpers/maze_creation.js","Components/ColourCode.js","Components/Results.js","Helpers/gridMethods.js","Components/dropdownOptions.js","CSS/bomb.svg","App.js","reportWebVitals.js","index.js"],"names":["Node","intersect","props","x","y","useEffect","setWall","isWall","setStart","isStart","setEnd","isEnd","setPath","isPath","setVisited","isVisited","setBomb","isBomb","useState","className","undefined","handleMouseEnter","onMouseDown","handleMouseDown","onMouseEnter","onMouseUp","handleMouseUp","getEightNeighbours","node","ROWS","COLS","neighbours","push","getFourNeighbours","contains","discovered_nodes","i","length","distanceFromEnd","endLoc","Math","abs","BinaryHeap","this","values","element","index","current","parentIndex","floor","parent","splice","min","end","pop","leftChildIndex","rightChildIndex","leftChild","rightChild","temp","leftPriority","rightPriority","currentPriority","a_star_search","startLoc","Grid","chosenDirection","open_nodes","add","closed_nodes","node_lowest_cost","removeMin","indexOf","neighbour","isDiagonal","g_score","h_score","f_score","parent_g_cost","get","remove","dijkstra_algorithm","visited","unvisited","cost","update_cost","previous","visitedNode","bfs","removed","queue","head","shift","dfs","stack","best_first","visitedNeighbour","bidirectional","startResult","endResult","start_queue","end_queue","updateStart","update_queue","updateEnd","timeout","delay","Promise","res","setTimeout","findPathFromClosed","a","path","found_start","last","unshift","findPathBidirectional","targetNode","intersectOne","one","backTrack","two","concat","list","iterator","drawPath","type","newGrid","slice","Dropdown","setOptions","options","hovered","setHover","default","mainValue","setMainValue","menuOptions","value","onClick","changeValue","dropDownValueChanged","onMouseLeave","setChosenMap","choice","toLowerCase","loopMap","maze_1","maze_2","boxes","smallBoxed","ColourCode","Results","content","setBody","body","chosenAlgorithm","timeTaken","round","performance","now","startTime","expanded","split","map","line","lineNumber","algorithmOptions","directionOptions","mazeOptions","speedOptions","App","setGrid","setStartLoc","setEndLoc","MouseDown","setMouseDown","bombDrag","setBombDrag","startDrag","setStartDrag","endDrag","setEndDrag","isRunning","setRunning","speed","setSpeed","gridPath","visitedPath","setAlgorithm","setDirection","setStartTime","bombLoc","setBombLoc","createGrid","grid","bidirectional_search","biOutput","startToBomb","bombToEnd","firstHalf","firstIntersect","secondHalf","secondHalfIntersect","visitedNodes","stepsBeforeExecution","drawPathHelper","biPathOne","biPathTwo","joined","biPath","clearVisitedPath","clearOldPath","stepsAfterExecution","checkEndLocExists","lastElement","findPathFromClosedHelper","startAlgorithm","firstList","secondList","createWalls","chosenMap","j","makeMaze","emptyGrid","clearWalls","removeBomb","src","bombSVG","alt","setting","row","yIndex","xIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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AAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGjKC,EAAS,CACX,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGjKF,EAAU,CACZ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGjKG,EAAQ,CACV,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEjKC,EAAa,CACf,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EA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","file":"static/js/main.ae54e26f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../CSS/node.css';\r\n\r\nfunction Node(props) {\r\n\r\n  const x = props.x;\r\n  const y = props.y;\r\n\r\n  useEffect(() => {\r\n    setWall(props.isWall) \r\n    setStart(props.isStart) \r\n    setEnd(props.isEnd)\r\n    setPath(props.isPath)\r\n    setVisited(props.isVisited)\r\n    setBomb(props.isBomb)\r\n  }, [props.isWall, props.isStart, props.isEnd, props.isPath, props.isVisited, props.isBomb])\r\n\r\n  const [isWall, setWall] = useState(false);\r\n  const [isStart, setStart] = useState(false);\r\n  const [isEnd, setEnd] = useState(false);\r\n  const [isPath, setPath] = useState(false);\r\n  const [isVisited, setVisited] = useState(false);\r\n  const [isBomb, setBomb] = useState(false);\r\n\r\n\r\n  let className = \"node\";\r\n  if (isEnd === true) {\r\n    className = \"end\";\r\n  }\r\n  else if (isStart === true) {\r\n    className = \"start\";\r\n  }\r\n  else if (isBomb === true) {\r\n    className = \"bomb\";\r\n  }\r\n  else if (isWall === true) {\r\n    className = \"wall\";\r\n  }\r\n  else if (isVisited === true) {\r\n    className = \"visited\";\r\n  }\r\n  else if (isPath === true) {\r\n    className = \"path\";\r\n  }\r\n  else {\r\n    className = \"node\";\r\n  }\r\n\r\n  let mainBody = <div className={className} />;\r\n  if (props.handleMouseEnter === undefined) {\r\n    mainBody = <div className={className} />\r\n  }\r\n  else {\r\n    mainBody = <div\r\n      onMouseDown={() => props.handleMouseDown(x, y)}\r\n      onMouseEnter={() => props.handleMouseEnter(x, y)}\r\n      onMouseUp={() => props.handleMouseUp()}\r\n      className={className} />\r\n  }\r\n  return (\r\n    mainBody\r\n  );\r\n}\r\n\r\nexport default Node;\r\n","import { getFourNeighbours, getEightNeighbours,contains} from './common_methods/methods';\r\n\r\nlet removed = [];\r\nlet intersect;\r\nexport const bidirectional = (ROWS, COLS, startLoc, endLoc, Grid, chosenDirection) => {\r\n    removed=[];\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n\r\n    \r\n    let start_queue = [[startLoc[0], startLoc[1], 0, null]];\r\n    let end_queue = [[endLoc[0], endLoc[1], 0, null]];\r\n    let startResult,endResult\r\n\r\n    while (start_queue.length > 0) {\r\n\r\n        const updateStart=update_queue(start_queue,ROWS,COLS,Grid,chosenDirection);\r\n        start_queue=updateStart[0];\r\n        startResult=updateStart[1];\r\n\r\n        const updateEnd=update_queue(end_queue,ROWS,COLS,Grid,chosenDirection);\r\n        end_queue=updateEnd[0];\r\n        endResult=updateEnd[1];\r\n                \r\n        if(startResult || endResult){\r\n            return [removed,intersect];\r\n        } \r\n        \r\n    }\r\n    \r\n    return [removed,intersect];\r\n\r\n\r\n}\r\n\r\nconst update_queue = (queue,ROWS,COLS,Grid,chosenDirection) => {\r\n    const head = queue[0];\r\n    if (head === undefined) {queue.shift(); return queue }\r\n    \r\n    if(contains(removed,head)){\r\n        intersect=head;\r\n        removed.push(head);\r\n        return [queue,true]\r\n    } \r\n    \r\n    let neighbours;\r\n    if (chosenDirection.indexOf(\"4\") > -1) {\r\n        neighbours = getFourNeighbours(head, ROWS, COLS);\r\n    }\r\n    else {\r\n        neighbours = getEightNeighbours(head, ROWS, COLS);\r\n    }\r\n\r\n    for (let i = 0; i < neighbours.length; i++) {\r\n        const neighbour = neighbours[i][0];\r\n        const isDiagonal = neighbours[i][1];\r\n\r\n        if (contains(queue, neighbour) || contains(removed, neighbour)) continue;\r\n        let cost = 0;\r\n        if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n            continue\r\n        }\r\n        else {\r\n            if (isDiagonal) cost = 1.41 + head[2];\r\n            else cost = 1 + head[2];\r\n        }\r\n        queue.push([neighbour[0], neighbour[1], cost, head]);\r\n    }\r\n    removed.push(queue.shift());\r\n    return [queue,false];\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\n/*\r\n  Returns the Top,Left,Bottom, Right and diagonal nodes of a given node (if they exist)\r\n*/\r\nexport const getEightNeighbours = (node, ROWS, COLS) => {\r\n    let neighbours = [];\r\n    if (node[0] > 0) {\r\n        neighbours.push([[node[0] - 1, node[1]],false]);\r\n        if (node[1] > 0) {\r\n            neighbours.push([[node[0] - 1, node[1] - 1],true]);\r\n        }\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([[node[0], node[1] - 1],false]);\r\n        if (node[0] < ROWS - 1) {\r\n            neighbours.push([[node[0] + 1, node[1] - 1],true]);\r\n        }\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([[node[0] + 1, node[1]],false]);\r\n        if (node[1] < COLS - 1) {\r\n            neighbours.push([[node[0] + 1, node[1] + 1],true]);\r\n        }\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([[node[0], node[1] + 1],false]);\r\n        if (node[0] > 0) {\r\n            neighbours.push([[node[0] - 1, node[1] + 1],true]);\r\n        }\r\n    }\r\n\r\n    return neighbours;\r\n}\r\n\r\n/*\r\n  Returns the Top,Left,Bottom and Right nodes of a given node (if they exist)\r\n*/\r\nexport const getFourNeighbours = (node, ROWS, COLS) => {\r\n    let neighbours = [];\r\n    if (node[0] > 0) {\r\n        neighbours.push([[node[0] - 1, node[1]],false]);\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([[node[0], node[1] - 1],false]);\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([[node[0] + 1, node[1]],false]);\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([[node[0], node[1] + 1],false]);\r\n    }\r\n\r\n    return neighbours;\r\n\r\n}\r\n/*\r\n    chceks to see if a node is within a given array\r\n*/\r\nexport const contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/*\r\n    Calculates the euclidean distance between 2 nodes\r\n*/\r\nexport const distanceFromEnd = (node, endLoc) => {\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}","\r\nexport default class BinaryHeap {\r\n    constructor() {\r\n        this.values = [];\r\n    }\r\n    length() {\r\n        return this.values.length;\r\n    }\r\n    add(element) {\r\n        this.values.push(element);\r\n        let index = this.values.length - 1;\r\n        const current = this.values[index];\r\n\r\n        while (index > 0) {\r\n            let parentIndex = Math.floor((index - 1) / 2);\r\n            let parent = this.values[parentIndex];\r\n\r\n            const parentPriority = parent[parent.length - 2];\r\n            const currentPriority = current[current.length - 2];\r\n\r\n            if (parentPriority > currentPriority) {\r\n                this.values[parentIndex] = current;\r\n                this.values[index] = parent;\r\n                index = parentIndex;\r\n            } else break;\r\n        }\r\n    }\r\n    remove(node) {\r\n        for (let i = 0; i < this.values.length; i++) {\r\n            const current = this.values[i];\r\n            if (current[0] === node[0] && current[1] === node[1]) {\r\n                this.values.splice(i,1);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    get(node) {\r\n        for (let i = 0; i < this.values.length; i++) {\r\n            const current = this.values[i];\r\n            if (current[0] === node[0] && current[1] === node[1]) {\r\n                return current;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    contains(node) {\r\n        for (let i = 0; i < this.values.length; i++) {\r\n            const current = this.values[i];\r\n            if (current[0] === node[0] && current[1] === node[1]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    peekMin() {\r\n        if (this.values.length > 0) return this.values[0];\r\n        return -1;\r\n    }\r\n    removeMin() {\r\n        const min = this.values[0];\r\n        const end = this.values.pop();\r\n        this.values[0] = end;\r\n\r\n        let index = 0;\r\n        const length = this.values.length;\r\n        const current = this.values[0];\r\n        while (true) {\r\n            let leftChildIndex = 2 * index + 1;\r\n            let rightChildIndex = 2 * index + 2;\r\n            let leftChild, rightChild;\r\n            let temp = null;\r\n\r\n            let leftPriority,rightPriority;\r\n            let currentPriority = current[current.length - 2];\r\n\r\n            if (leftChildIndex < length) {\r\n                leftChild = this.values[leftChildIndex];\r\n                leftPriority = leftChild[leftChild.length - 2];\r\n                currentPriority = current[current.length - 2];\r\n                if (leftPriority < currentPriority) temp = leftChildIndex;\r\n            }\r\n            if (rightChildIndex < length) {\r\n                rightChild = this.values[rightChildIndex];\r\n                leftPriority = leftChild[leftChild.length - 2];\r\n                rightPriority = rightChild[rightChild.length - 2]; \r\n                if ((temp === null && rightPriority < currentPriority) || (temp !== null && rightPriority < leftPriority)){\r\n                    temp = rightChildIndex;\r\n                }\r\n            }\r\n\r\n            if (temp === null) break;\r\n            this.values[index] = this.values[temp];\r\n            this.values[temp] = current;\r\n            index = temp;\r\n        }\r\n\r\n        return min;\r\n    }\r\n}","\r\nimport { getFourNeighbours, getEightNeighbours,contains,distanceFromEnd} from './common_methods/methods';\r\nimport BinaryHeap from '../Components/binaryHeap';\r\n\r\n\r\n\r\n\r\n/*\r\n        list        heap\r\nadd     1           O(logN)\r\nfindMin O(N)        O(1)\r\ncontains O(N)       o(N)\r\n\r\n*/\r\n\r\nexport const a_star_search = (ROWS, COLS, startLoc, endLoc, Grid, chosenDirection) => {\r\n\r\n    let open_nodes = new BinaryHeap();\r\n    open_nodes.add([startLoc[0], startLoc[1], 0, 0, 0])\r\n    let closed_nodes = [];\r\n\r\n    while (open_nodes.length() >0 && open_nodes.length() < 1000) {\r\n\r\n        let node_lowest_cost = open_nodes.removeMin();\r\n\r\n        if (node_lowest_cost === undefined) break;\r\n\r\n        let neighbours;\r\n        if (chosenDirection.indexOf(\"4\") > -1) {\r\n            neighbours = getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else {\r\n            neighbours = getEightNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n\r\n\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal = neighbours[i][1];\r\n            let g_score, h_score, f_score = 0;\r\n\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue;\r\n            }\r\n            else {\r\n                // const parent_f_cost=node_lowest_cost[node_lowest_cost.length-2];\r\n                const parent_g_cost=node_lowest_cost[3];\r\n\r\n                if (isDiagonal) g_score = parent_g_cost + 2.4;\r\n                else g_score = parent_g_cost + 2;\r\n                h_score = distanceFromEnd(neighbour, endLoc);\r\n                f_score = g_score + h_score;\r\n            }\r\n\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                closed_nodes.push(node_lowest_cost);\r\n                closed_nodes.push([neighbour[0], neighbour[1], h_score, g_score, f_score,node_lowest_cost]);\r\n                return closed_nodes;\r\n            }\r\n            \r\n            if(!contains(closed_nodes, neighbour)){\r\n                if(!open_nodes.contains(neighbour)){\r\n                    open_nodes.add([neighbour[0], neighbour[1], h_score, g_score, f_score, node_lowest_cost]);\r\n                }\r\n                else{\r\n                    const visitedNeighbour=open_nodes.get(neighbour);\r\n                    const visited_g_score=visitedNeighbour[3];\r\n                    if(visited_g_score>g_score){\r\n                        // new path is better\r\n                        open_nodes.remove(neighbour);\r\n                        open_nodes.add([neighbour[0], neighbour[1], h_score, g_score, f_score, node_lowest_cost]);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            \r\n\r\n           \r\n        }\r\n        open_nodes.remove(node_lowest_cost);\r\n        closed_nodes.push(node_lowest_cost);\r\n        \r\n    }\r\n\r\n    return closed_nodes;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {getFourNeighbours,getEightNeighbours,contains} from './common_methods/methods';\r\nimport BinaryHeap from '../Components/binaryHeap';\r\n\r\n\r\nexport const dijkstra_algorithm = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n   \r\n    let visited = [];\r\n    let unvisited =new BinaryHeap();\r\n    unvisited.add([startLoc[0], startLoc[1], 0, null]);\r\n\r\n\r\n\r\n    while (unvisited.length() > 0 && unvisited.length() < 20000) {\r\n\r\n        const node_lowest_cost = unvisited.removeMin();\r\n        \r\n        if (node_lowest_cost[0] === endLoc[0] && node_lowest_cost[1] === endLoc[1]) {\r\n            visited.push(node_lowest_cost);\r\n            return visited;\r\n        }\r\n        \r\n        let neighbours;\r\n        if (node_lowest_cost === undefined) {break; }\r\n        \r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getEightNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        \r\n        \r\n        \r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal=neighbours[i][1];\r\n            if (contains(visited, neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue\r\n            }\r\n            else {\r\n                if(isDiagonal) cost = 1.41 + node_lowest_cost[2];\r\n                else cost = 1 + node_lowest_cost[2];\r\n                \r\n            }\r\n            \r\n            unvisited=update_cost(neighbour, cost, node_lowest_cost, unvisited);\r\n\r\n        }\r\n        unvisited.remove(node_lowest_cost);\r\n        \r\n        visited.push(node_lowest_cost);\r\n      \r\n\r\n\r\n    }\r\n    return visited;\r\n\r\n\r\n}\r\n\r\nconst update_cost = (node, cost, previous, unvisited) => {\r\n    \r\n    if(unvisited.contains(node)){\r\n        const visitedNode=unvisited.get(node);\r\n        const visitedCost=visitedNode[visitedNode.length-2];\r\n        if(visitedCost>cost){\r\n            unvisited.remove(node);\r\n            unvisited.add([node[0], node[1], cost, previous]);\r\n        }\r\n        \r\n    }\r\n    else unvisited.add([node[0], node[1], cost, previous]);\r\n    \r\n    return unvisited;\r\n    \r\n}\r\n","import {getFourNeighbours,getEightNeighbours,contains} from './common_methods/methods';\r\n\r\n\r\nexport const bfs = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    \r\n    let removed=[];\r\n    let queue = [[startLoc[0], startLoc[1], 0, null]];\r\n    while (queue.length>0) {\r\n\r\n        const head = queue[0];\r\n\r\n        if (head === undefined) { break; }\r\n\r\n        let neighbours;\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(head, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getEightNeighbours(head, ROWS, COLS);\r\n        }\r\n\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal=neighbours[i][1];\r\n            \r\n            if (contains(queue, neighbour) || contains(removed,neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue\r\n            }\r\n            else {\r\n                if(isDiagonal) cost = 1.41 + head[2];\r\n                else cost = 1 + head[2];\r\n                \r\n            }\r\n            queue.push([neighbour[0], neighbour[1], cost, head]);\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                removed.push(queue.shift());\r\n                removed.push([neighbour[0], neighbour[1], cost, head]);\r\n                return removed;\r\n            }  \r\n\r\n        }\r\n        removed.push(queue.shift());\r\n\r\n\r\n\r\n    }\r\n    return removed;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {getFourNeighbours,getEightNeighbours,contains} from './common_methods/methods';\r\n\r\n\r\nexport const dfs = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n    let removed=[];\r\n    let stack = [[startLoc[0], startLoc[1], 0, null]];\r\n    while (stack.length>=0 && stack.length<100000) {\r\n\r\n        const head = stack[stack.length-1];\r\n        if (head === undefined) { \r\n            break; \r\n        }\r\n        removed.push(head);\r\n        stack.splice(stack.length-1,1);\r\n        \r\n\r\n        let neighbours;\r\n\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(head, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getEightNeighbours(head, ROWS, COLS);\r\n        }\r\n        \r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            const isDiagonal=neighbours[i][1];\r\n            //if node already in stack, then remove it and push it to the back\r\n            if (contains(removed,neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue\r\n            }\r\n            else {\r\n                if(isDiagonal) cost = 1.41 + head[2];\r\n                else cost = 1 + head[2];\r\n            }\r\n            stack.push([neighbour[0], neighbour[1], cost, head]);\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                removed.push(head);\r\n                removed.push([neighbour[0], neighbour[1], cost, head]);\r\n                return removed;\r\n            }  \r\n\r\n        }\r\n\r\n    }\r\n\r\n    return removed;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { getFourNeighbours, getEightNeighbours,contains,distanceFromEnd} from './common_methods/methods';\r\nimport BinaryHeap from '../Components/binaryHeap';\r\n\r\n\r\nexport const best_first = (ROWS, COLS, startLoc, endLoc, Grid, chosenDirection) => {\r\n    let open_nodes = new BinaryHeap();\r\n    open_nodes.add([startLoc[0], startLoc[1], 0, 0, 0])\r\n    let closed_nodes = [];\r\n\r\n    while (open_nodes.length() > 0 && open_nodes.length() < 20000) {\r\n\r\n        const node_lowest_cost = open_nodes.removeMin();\r\n\r\n        if (node_lowest_cost === undefined) break;\r\n\r\n        let neighbours;\r\n        if (chosenDirection.indexOf(\"4\") > -1) {\r\n            neighbours = getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else {\r\n            neighbours = getEightNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n\r\n\r\n\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i][0];\r\n            let h_score;\r\n\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall && !Grid[neighbour[0]][neighbour[1]].props.isEnd) {\r\n                continue;\r\n            }\r\n            else {\r\n                h_score = distanceFromEnd(neighbour, endLoc);\r\n            }\r\n\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                closed_nodes.push(node_lowest_cost);\r\n                closed_nodes.push([neighbour[0], neighbour[1], h_score, node_lowest_cost]);\r\n\r\n                return closed_nodes;\r\n            }\r\n\r\n            if(!contains(closed_nodes, neighbour)){\r\n                if(!open_nodes.contains(neighbour)){\r\n                    open_nodes.add([neighbour[0], neighbour[1], h_score,node_lowest_cost]);\r\n                }\r\n                else{\r\n                    const visitedNeighbour=open_nodes.get(neighbour);\r\n                    const visited_h_score=visitedNeighbour[visitedNeighbour.length-2];\r\n                    if(visited_h_score>h_score){\r\n                        // new path is better\r\n                        open_nodes.remove(neighbour);\r\n                        open_nodes.add([neighbour[0], neighbour[1], h_score,node_lowest_cost]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        open_nodes.remove(node_lowest_cost);\r\n            closed_nodes.push(node_lowest_cost);\r\n    }\r\n\r\n    return closed_nodes;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import Node from '../Components/Node';\r\n\r\nexport function timeout(delay) {\r\n    return new Promise(res => setTimeout(res, delay));\r\n}\r\n\r\n/*\r\n  Backtracks from the end of the list to find the start node and keeps a track using the path array.\r\n*/\r\nexport const findPathFromClosed = async (closed_nodes, startLoc) => {\r\n    let path = [];\r\n    let found_start = false;\r\n    \r\n    let last = closed_nodes[closed_nodes.length - 1];\r\n    while (found_start === false) {\r\n        path.unshift(last);\r\n        \r\n        if (last === undefined || last===null) break;\r\n        if (last[0] === startLoc[0] && last[1] === startLoc[1]) found_start = true;\r\n        else {\r\n            last = last[last.length - 1];\r\n        }\r\n    }\r\n    return path;\r\n}\r\n\r\n/*\r\n  A different version for the findPath function to accomodate the bidirectional search\r\n  it outputs the final path \r\n*/\r\nexport const findPathBidirectional = async (closed_nodes, targetNode) => {\r\n    let intersectOne;\r\n    for (let i = 0; i < closed_nodes.length; i++) {\r\n        const node = closed_nodes[i];\r\n        if (node[0] === targetNode[0] && node[1] === targetNode[1]) {\r\n            intersectOne = node;\r\n            break;\r\n        }\r\n    }\r\n    let one = backTrack(intersectOne);\r\n    let two = backTrack(targetNode);\r\n    return one.concat(two);\r\n}\r\n\r\n/*\r\n  Used to backtrack for the findPathBidirectional function\r\n*/\r\nconst backTrack = (node) => {\r\n    let list = [node];\r\n    let iterator = node;\r\n    while (iterator !== undefined && iterator[3] !== null) {\r\n        list.push(iterator[3]);\r\n        iterator = iterator[3];\r\n    }\r\n    return list;\r\n}\r\n\r\n/*\r\n  Sets either visited or path props for a given node to be true\r\n*/\r\nexport const drawPath = async (Grid, path, i, type) => {\r\n    const newGrid = Grid.slice();\r\n    if (i > 0 && i <= path.length - 1) {\r\n        if(path[i]===undefined || path[i]===null) return newGrid;\r\n        const x = path[i][0];\r\n        const y = path[i][1];\r\n        if (x === undefined || y === undefined) return newGrid;\r\n        if (newGrid[x][y].props.isBomb) return newGrid;\r\n        if (type === \"visited\") {\r\n            newGrid[x][y] = <Node\r\n                isWall={false}\r\n                isBomb={Grid[x][y].props.isBomb}\r\n                isStart={Grid[x][y].props.isStart}\r\n                isEnd={Grid[x][y].props.isEnd}\r\n                isPath={false}\r\n                isVisited={true}\r\n            />;\r\n        }\r\n        else {\r\n            newGrid[x][y] = <Node\r\n                isWall={false}\r\n                isBomb={Grid[x][y].props.isBomb}\r\n                isStart={Grid[x][y].props.isStart}\r\n                isEnd={Grid[x][y].props.isEnd}\r\n                isPath={true}\r\n                isVisited={false}\r\n            />;\r\n        }\r\n    }\r\n    return newGrid;\r\n\r\n\r\n}\r\n\r\n\r\n/*\r\n  Creates the visited list for the bomb node.\r\n*/\r\nexport const createBombVisit = (firstList, secondList) => {\r\n    secondList[0][secondList[0].length - 1] = firstList[firstList.length - 1];\r\n    const finalList = firstList.concat(secondList);\r\n\r\n    return finalList;\r\n    \r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../CSS/dropdown.css';\r\n\r\nfunction Dropdown(props) {\r\n    useEffect(() => {\r\n        setOptions(props.options) //> I'm dispatching an action here.\r\n    }, [props.options])\r\n\r\n    const [options, setOptions] = useState([]);\r\n    const [hovered, setHover] = useState(false);\r\n    const [mainValue, setMainValue] = useState(props.default);\r\n\r\n    let menuOptions=[];\r\n    /*\r\n        Creates the dropdown menu\r\n    */\r\n    for(const value of options){\r\n        menuOptions.push(<p key={value} onClick={()=>changeValue(value)} className={\"item\"}>{value}</p>)\r\n    }\r\n    /*\r\n        Called when the user selects a value from the dropdown meny\r\n    */\r\n    const changeValue=(value)=>{\r\n        setMainValue(value);\r\n        props.dropDownValueChanged(value);\r\n    }\r\n\r\n    return (\r\n        <div className={\"dropdownContainer\"}  onMouseEnter={() => setHover(true)} onMouseLeave={() => setHover(false)} >\r\n            <div className={\"dropdown\"}>\r\n                <p key={mainValue} className={\"value\"}>{mainValue}</p>\r\n            </div>\r\n            {hovered && (\r\n                <div className={\"subMenu\"}>\r\n                    {menuOptions}\r\n                </div>\r\n            )}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Dropdown;","import Node from '../Components/Node';\r\n\r\n\r\nexport const makeMaze = (startLoc, endLoc, grid, chosenMap) => {\r\n    chosenMap = setChosenMap(chosenMap);\r\n    for (let i = 0; i < grid.length; i++) {\r\n        for (let j = 0; j < grid[i].length; j++) {\r\n            if ((i === startLoc[0] && j === startLoc[1]) || (i === endLoc[0] && j === endLoc[1])) continue;\r\n            if (chosenMap[i][j] !== undefined && chosenMap[i][j] === 1) {\r\n                grid[i][j] = <Node\r\n                    isWall={true}\r\n                    isStart={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isEnd={false}\r\n                />;\r\n            }\r\n        }\r\n    }\r\n    return grid;\r\n}\r\n\r\n/*\r\n    given the string choice it will find the corresponding 2d array and return it.\r\n*/\r\nconst setChosenMap = (choice) => {\r\n    choice = choice.toLowerCase();\r\n    if (choice === \"loop\") {\r\n        return loopMap;\r\n    }\r\n    else if (choice === \"maze 1\") {\r\n        return maze_1;\r\n    }\r\n    else if (choice === \"maze 2\") {\r\n        return maze_2;\r\n    }\r\n    else if (choice === \"boxed\") {\r\n        return boxes;\r\n    }\r\n    else if (choice === \"small boxed\") {\r\n        return smallBoxed;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst maze_1 = [\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1],\r\n    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],\r\n    [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1],\r\n    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],\r\n    [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\r\n    [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n]\r\n\r\nconst maze_2 = [\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\r\n    [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1],\r\n    [1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1],\r\n    [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1],\r\n    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1],\r\n    [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1],\r\n    [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1],\r\n    [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1],\r\n    [1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1],\r\n    [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1],\r\n    [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\r\n    [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1],\r\n    [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1],\r\n    [1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n]\r\n\r\nconst loopMap = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\r\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]\r\n]\r\n\r\nconst boxes = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\r\n    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n]\r\nconst smallBoxed = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n]\r\n\r\n\r\n","import React from 'react';\r\nimport Node from './Node';\r\nimport '../CSS/grid.css';\r\n\r\nexport default function ColourCode(props) {\r\n    return (\r\n        <div className=\"keySet\">\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={true}\r\n                    isEnd={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>Wall</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isStart={true}\r\n                    \r\n                />\r\n                <h3>Start</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={true}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>End</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={false}\r\n                    isPath={false}\r\n                    isVisited={true}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>Visited</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={false}\r\n                    isPath={true}\r\n                    isVisited={false}\r\n                    isStart={false}\r\n                    \r\n                />\r\n                <h3>Path</h3>\r\n            </div>\r\n            <div className=\"key\">\r\n                <Node\r\n                    key={-1}\r\n                    isWall={false}\r\n                    isEnd={false}\r\n                    isPath={false}\r\n                    isVisited={false}\r\n                    isStart={false}\r\n                    isBomb={true}\r\n                    \r\n                />\r\n                <h4>Bomb Node</h4>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Node from './Node';\r\nimport '../CSS/grid.css';\r\n\r\nexport default function Results(props) {\r\n\r\n    useEffect(() => {\r\n        if(props.content===null){\r\n            setBody(body + '\\nNo path found for: '+props.chosenAlgorithm);\r\n        }\r\n        else if (props.content.length !== 0) {\r\n            const timeTaken=Math.round((performance.now() - props.startTime)/1000 * 100) / 100\r\n            setBody(body + '\\n'+props.chosenAlgorithm+' Algorithm    |    Nodes Expanded = ' + props.expanded.length+'  |    Final Path Length = ' + props.content.length + \"    |    Time Taken = \" + timeTaken+\" seconds\")\r\n        }\r\n\r\n    }, [props.content])\r\n\r\n\r\n    const [body, setBody] = useState(\"\");\r\n\r\n\r\n\r\n    return (\r\n        <div className={\"resultContainer\"}>\r\n            <h3 className={\"resultHeader\"}>Results</h3>\r\n            <div className=\"resultBody\">\r\n                {body.split('\\n').map((line,lineNumber) => <p key={lineNumber}>{line}</p>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import Node from '../Components/Node';\r\n\r\nexport const clearEverything = (ROWS, COLS, grid) => {\r\n  for (let y = 0; y < ROWS; y++) {\r\n    for (let x = 0; x < COLS; x++) {\r\n      grid[x][y] = <Node\r\n        isWall={false}\r\n        isPath={false}\r\n        isVisited={false}\r\n        isStart={grid[y][x].props.isStart}\r\n        isEnd={grid[y][x].props.isEnd}\r\n        isBomb={grid[y][x].props.isBomb}\r\n        />\r\n        \r\n    }\r\n  }\r\n  return grid;\r\n}\r\nexport const clearOldPath = (path, Grid) => {\r\n  if (path === null || path === undefined) return;\r\n  const newGrid = Grid.slice();\r\n\r\n  for (let i = 1; i < path.length - 1; i++) {\r\n    const x = path[i][0];\r\n    const y = path[i][1];\r\n    if(x===undefined || y===undefined) return newGrid;\r\n    newGrid[x][y] = <Node\r\n      isWall={Grid[x][y].props.isWall}\r\n      isStart={Grid[x][y].props.isStart}\r\n      isEnd={Grid[x][y].props.isEnd}\r\n      isPath={false}\r\n      isVisited={false}\r\n      isBomb={Grid[x][y].props.isBomb}\r\n    />;\r\n  }\r\n  return newGrid;\r\n}\r\n\r\nexport const clearVisitedPath = (visitedPath, Grid) => {\r\n  const newGrid = Grid.slice();\r\n  for (let i = 1; i < visitedPath.length; i++) {\r\n    const x = visitedPath[i][0];\r\n    const y = visitedPath[i][1]\r\n    newGrid[x][y] = <Node\r\n      isWall={Grid[x][y].props.isWall}\r\n      isBomb={Grid[x][y].props.isBomb}\r\n      isStart={Grid[x][y].props.isStart}\r\n      isEnd={Grid[x][y].props.isEnd}\r\n      isPath={false}\r\n      isVisited={false}\r\n    />;\r\n  }\r\n  return newGrid;\r\n}\r\n\r\n\r\n\r\nexport const clearWalls = (Grid, ROWS, COLS) => {\r\n  let grid = [];\r\n  for (let y = 0; y < ROWS; y++) {\r\n    grid.push([]);\r\n    for (let x = 0; x < COLS; x++) {\r\n      grid[y].push(\r\n        <Node\r\n          isWall={false}\r\n          isPath={false}\r\n          isVisited={false}\r\n          isStart={Grid[y][x].props.isStart}\r\n          isEnd={Grid[y][x].props.isEnd} \r\n          isBomb={Grid[y][x].props.isBomb}\r\n          />\r\n      );\r\n    }\r\n  }\r\n  return grid\r\n\r\n}\r\n/*\r\n  Creates a new grid\r\n*/\r\nexport const emptyGrid = (Grid, ROWS, COLS) => {\r\n  let grid = [];\r\n  for (let y = 0; y < ROWS; y++) {\r\n    grid.push([]);\r\n    for (let x = 0; x < COLS; x++) {\r\n      grid[y].push(\r\n        <Node\r\n          isWall={false}\r\n          isPath={false}\r\n          isVisited={false}\r\n          isStart={Grid[y][x].props.isStart}\r\n          isEnd={Grid[y][x].props.isEnd} />\r\n      );\r\n    }\r\n  }\r\n  return grid;\r\n\r\n}\r\nexport const setBomb = (Grid, x, y) => {\r\n  let grid = Grid.slice();\r\n  grid[x][y] =\r\n    <Node\r\n      isBomb={true}\r\n      isStart={Grid[x][y].props.isStart}\r\n      isEnd={Grid[x][y].props.isEnd} />\r\n  return grid;\r\n\r\n}\r\n\r\nexport const removeBomb = (Grid, x, y) => {\r\n  let grid = Grid.slice();\r\n  grid[x][y] =\r\n    <Node\r\n      isBomb={false}\r\n      isStart={Grid[x][y].props.isStart}\r\n      isEnd={Grid[x][y].props.isEnd} />\r\n  return grid;\r\n\r\n}\r\nexport const speedSetter=(setting)=>{\r\n  setting=setting.toLowerCase();\r\n  if(setting===\"very fast\") return 2;\r\n  else if(setting===\"fast\") return 50;\r\n  else if(setting===\"medium\") return 150;\r\n  else if(setting===\"slow\") return 300;\r\n  else if(setting===\"very slow\") return 400;\r\n}","export const algorithmOptions = [\r\n    'A* Search', 'Dijkstra', 'Depth-First Search', 'Breadth-First Search', 'Best-First Search', 'Bidirectional search'\r\n];\r\nexport const directionOptions = [\r\n    '4-Directional', '8-Directional'\r\n]\r\nexport const mazeOptions = [\r\n    'Loop', 'Maze 1', 'Maze 2', 'Boxed','Small Boxed'\r\n]\r\nexport const speedOptions = [\r\n    'Very Slow', 'Slow', 'Medium', 'Fast','Very Fast'\r\n]","export default __webpack_public_path__ + \"static/media/bomb.be1672a5.svg\";","import React, { useState, useEffect } from 'react';\n\nimport './CSS/grid.css';\nimport Node from './Components/Node';\nimport { a_star_search } from './algorithms/a_star_search';\nimport { dijkstra_algorithm } from './algorithms/dijkstra';\nimport { bfs } from './algorithms/breadth_first';\nimport { dfs } from './algorithms/depth_first';\nimport { best_first } from './algorithms/best_first';\nimport { bidirectional } from './algorithms/bidirectional_search';\nimport { timeout, findPathFromClosed, drawPath, findPathBidirectional, createBombVisit } from './Helpers/path_finder';\nimport Dropdown from './Components/Dropdown';\nimport { makeMaze } from './Helpers/maze_creation';\nimport ColourCode from './Components/ColourCode';\nimport Results from './Components/Results';\nimport { clearOldPath, clearVisitedPath, clearWalls, emptyGrid, setBomb, removeBomb,speedSetter} from './Helpers/gridMethods';\nimport { algorithmOptions, directionOptions, mazeOptions, speedOptions } from './Components/dropdownOptions';\nimport bombSVG from './CSS/bomb.svg';\n\n\nfunction App() {\n  // main grid, start & end points\n  const [Grid, setGrid] = useState([]);\n  const [startLoc, setStartLoc] = useState([5, 5]);\n  const [endLoc, setEndLoc] = useState([5, 15]);\n  // variables for dragging and dropping\n  const [MouseDown, setMouseDown] = useState(false);\n  const [bombDrag, setBombDrag] = useState(false);\n  const [startDrag, setStartDrag] = useState(false);\n  const [endDrag, setEndDrag] = useState(false);\n  //variables for algorithm execution\n  const [isRunning, setRunning] = useState(false);\n  const [speed,setSpeed]=useState(2);\n\n  const [gridPath, setPath] = useState([]);\n  const [visitedPath, setVisited] = useState([]);\n  const [chosenAlgorithm, setAlgorithm] = useState(\"\");\n  const [chosenDirection, setDirection] = useState(\"\");\n  const [startTime, setStartTime] = useState(0);\n  // bomb node\n  const [bombLoc, setBombLoc] = useState([1]);\n\n\n\n  useEffect(() => {\n\n    setGrid(createGrid());\n  }, []);\n\n  const ROWS = 18;\n  const COLS = 55;\n\n  /**\n   * This function creates a new grid and sets the start and end nodes.\n   * \n   */\n  const createGrid = () => {\n    let grid = [];\n    for (let y = 0; y < ROWS; y++) {\n      grid.push([]);\n      for (let x = 0; x < COLS; x++) {\n        grid[y].push(\n          <Node />\n        );\n      }\n    }\n    grid[startLoc[0]][startLoc[1]] = <Node isStart={true} />;\n    grid[endLoc[0]][endLoc[1]] = <Node isEnd={true} />;\n    if (bombLoc.length > 0) grid[bombLoc[0]][bombLoc[1]] = <Node isBomb={true} />;\n\n    return grid;\n  }\n\n  /*\n  * handleMouseDown will toggle the isWall props of a given node\n  */\n  const handleMouseDown = (x, y) => {\n    if (isRunning) return;\n    setMouseDown(true);\n    if (x === null || y === null || x < 0 || y < 0) return;\n    if (x === startLoc[0] && y === startLoc[1]) {\n      setStartDrag(true);\n    }\n    else if (x === endLoc[0] && y === endLoc[1]) {\n      setEndDrag(true);\n    }\n    else if (x === bombLoc[0] && y === bombLoc[1]) {\n      setBombDrag(true);\n    }\n    else {\n      let newGrid = Grid.slice();\n      if (newGrid[x][y].props.isStart || newGrid[x][y].props.isEnd || newGrid[x][y].props.isBomb) return;\n      newGrid[x][y] =\n        <Node\n          key={y}\n          isWall={!newGrid[x][y].props.isWall} />\n      setGrid(newGrid)\n    }\n  }\n\n  /*\n  * This function will toggle the isWall property and ensure that the start,end and bomb nodes are moved correctly\n  */\n  const handleMouseEnter = (x, y) => {\n    if (isRunning) return;\n    if (x === null || y === null || x < 0 || y < 0) return;\n    if (x === bombLoc[0] && y === bombLoc[1]) return;\n    if (x === endLoc[0] && y === endLoc[1]) return;\n    if (x === startLoc[0] && y === startLoc[1]) return;\n    if (MouseDown) {\n      let newGrid = Grid.slice();\n      if (!startDrag && !endDrag && !bombDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            isWall={!newGrid[x][y].props.isWall} />\n      }\n      if (startDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            isStart={true}\n            isWall={newGrid[x][y].props.isWall} />\n\n        newGrid[startLoc[0]][startLoc[1]] = <Node\n          isWall={newGrid[startLoc[0]][startLoc[1]].props.isWall}\n        />;\n        setStartLoc([x, y])\n      }\n      else if (endDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            isEnd={true}\n            isWall={newGrid[x][y].props.isWall}\n\n          />\n        newGrid[endLoc[0]][endLoc[1]] = <Node\n          isWall={newGrid[endLoc[0]][endLoc[1]].props.isWall}\n\n        />;\n        setEndLoc([x, y])\n\n\n      }\n      else if (bombDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            isBomb={true}\n            isWall={newGrid[x][y].props.isWall}\n          />\n        newGrid[bombLoc[0]][bombLoc[1]] = <Node\n          isWall={newGrid[bombLoc[0]][bombLoc[1]].props.isWall}\n        />;\n        setBombLoc([x, y])\n      }\n      setGrid(newGrid)\n    }\n  }\n\n  /*\n  * handleMouseUp will set to false all the dragging and dropping hooks\n  */\n  const handleMouseUp = (x, y) => {\n    if (isRunning) return;\n    setMouseDown(false);\n    if (x === null || y === null || x < 0 || y < 0) return;\n    setStartDrag(false);\n    setEndDrag(false);\n    setBombDrag(false);\n  }\n\n\n  /*\n  * bidirectional_search will call bidirectional and parse the result correctly to ensure it can be visualised on the grid.\n  */\n  const bidirectional_search = async () => {\n    let biOutput = [], intersect;\n    if (bombLoc.length > 1) {\n      const startToBomb = bidirectional(ROWS, COLS, startLoc, bombLoc, Grid, chosenDirection);\n      const bombToEnd = bidirectional(ROWS, COLS, bombLoc, endLoc, Grid, chosenDirection);\n\n      const firstHalf = startToBomb[0];\n      const firstIntersect = startToBomb[1];\n\n      const secondHalf = bombToEnd[0];\n      const secondHalfIntersect = bombToEnd[1];\n\n      const visitedNodes = firstHalf.concat(secondHalf);\n      stepsBeforeExecution(visitedNodes);\n      await drawPathHelper(visitedNodes, 1, \"visited\");\n\n      const biPathOne = await findPathBidirectional(firstHalf, firstIntersect);\n      const biPathTwo = await findPathBidirectional(secondHalf, secondHalfIntersect);\n\n      const joined = biPathOne.concat(biPathTwo);\n      setPath(joined);\n\n      await drawPathHelper(joined, 1, \"path\");\n\n    }\n    else {\n      biOutput = bidirectional(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n      let closed_nodes = biOutput[0];\n      intersect = biOutput[1];\n\n      stepsBeforeExecution(closed_nodes);\n      await drawPathHelper(closed_nodes, 1, \"visited\");\n      if (intersect === null || intersect === undefined) {\n        setPath(null); //Necessary to trigger re-render of App\n        setPath([]);\n        return;\n      }\n      let biPath = await findPathBidirectional(closed_nodes, intersect);\n      setPath(biPath.slice(0, biPath.length - 1));\n      await drawPathHelper(biPath, 1, \"path\");\n    }\n\n\n\n  }\n\n  /*\n    stepsBeforeExecution - Does all the pre-processing of clearing the old paths and visited nodes before the next algorithm is visualised. \n   */\n  const stepsBeforeExecution = (closed_nodes) => {\n    setGrid(clearVisitedPath(visitedPath, Grid));\n    setGrid(clearOldPath(gridPath, Grid));\n    setVisited(closed_nodes);\n  }\n  /*\n   * stepsAfterExecution runs after an algorithm has been executed and uses the output to draw the visited & final paths.\n   */\n  const stepsAfterExecution = async (closed_nodes) => {\n    await drawPathHelper(closed_nodes, 1, \"visited\");\n    await checkEndLocExists(closed_nodes);\n  }\n  /*\n     checkEndLocExists ensures that if the end node is not found within the closed nodes then it sets the path to an empty array\n   */\n  const checkEndLocExists = async (closed_nodes) => {\n    const lastElement = closed_nodes[closed_nodes.length - 1];\n    if (lastElement !== null && lastElement !== undefined && lastElement[0] === endLoc[0] && lastElement[1] === endLoc[1]) {\n      closed_nodes = await findPathFromClosedHelper(closed_nodes);\n      setPath(closed_nodes);\n\n      await drawPathHelper(closed_nodes, 1, \"path\");\n    }\n    else {\n      setPath(null); //Necessary to trigger re-render of App\n      setPath([]);\n    }\n  }\n  /*\n    findPathFromClosedHelper calls the findPathFromClosed function to backtrack to the start node\n   */\n  const findPathFromClosedHelper = async (closed_nodes) => {\n    let path = await findPathFromClosed(closed_nodes, startLoc);\n    return path;\n  }\n  /*\n     drawPathHelper recursively sets each node at the index i to either a path or visited node\n   */\n  const drawPathHelper = async (path, i, type) => {\n    if (i > 0 && i <= path.length - 1) {\n      let newGrid = await drawPath(Grid, path, i, type)\n      setGrid(newGrid);\n      await timeout(speed);\n      await drawPathHelper(path, i + 1, type);\n    }\n\n\n  }\n\n  /*\n     startAlgorithm begins the execution of the chosen algorithm\n   */\n  const startAlgorithm = async () => {\n    if (isRunning || chosenAlgorithm===\"\") return;\n    setRunning(true);\n\n    setStartTime(performance.now());\n    let closed_nodes, secondHalf = [];\n    if (chosenAlgorithm === \"A* Search\") {\n      if (bombLoc.length > 1) {\n        closed_nodes = a_star_search(ROWS, COLS, startLoc, bombLoc, Grid, chosenDirection);\n        secondHalf = a_star_search(ROWS, COLS, bombLoc, endLoc, Grid, chosenDirection);\n      }\n      else closed_nodes = a_star_search(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n\n\n    }\n    else if (chosenAlgorithm === \"Dijkstra\") {\n      if (bombLoc.length > 1) {\n        closed_nodes = dijkstra_algorithm(ROWS, COLS, startLoc, bombLoc, Grid, chosenDirection);\n        secondHalf = dijkstra_algorithm(ROWS, COLS, bombLoc, endLoc, Grid, chosenDirection);\n      }\n      else closed_nodes = dijkstra_algorithm(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n\n    }\n    else if (chosenAlgorithm === \"Breadth-First Search\") {\n      if (bombLoc.length > 1) {\n        closed_nodes = bfs(ROWS, COLS, startLoc, bombLoc, Grid, chosenDirection);\n        secondHalf = bfs(ROWS, COLS, bombLoc, endLoc, Grid, chosenDirection);\n      }\n      else closed_nodes = bfs(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    }\n    else if (chosenAlgorithm === \"Depth-First Search\") {\n      if (bombLoc.length > 1) {\n        closed_nodes = dfs(ROWS, COLS, startLoc, bombLoc, Grid, chosenDirection);\n        secondHalf = dfs(ROWS, COLS, bombLoc, endLoc, Grid, chosenDirection);\n      }\n      else closed_nodes = dfs(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    }\n    else if (chosenAlgorithm === \"Best-First Search\") {\n      if (bombLoc.length > 1) {\n        closed_nodes = best_first(ROWS, COLS, startLoc, bombLoc, Grid, chosenDirection);\n        secondHalf = best_first(ROWS, COLS, bombLoc, endLoc, Grid, chosenDirection);\n      }\n      else closed_nodes = best_first(ROWS, COLS, startLoc, endLoc, Grid, chosenDirection);\n    }\n    else if (chosenAlgorithm === \"Bidirectional search\") {\n      await bidirectional_search();\n      setRunning(false);\n      return;\n\n    }\n    if (bombLoc.length > 1) {\n      closed_nodes = createBombVisit(closed_nodes, secondHalf);\n    }\n\n    stepsBeforeExecution(closed_nodes);\n    await stepsAfterExecution(closed_nodes);\n    setRunning(false)\n\n  }\n\n  /*\n    createWalls Calls the makeMaze function and sets the grid to the given maze.\n   */\n  const createWalls = (value) => {\n    setGrid(makeMaze(startLoc, endLoc, emptyGrid(Grid, ROWS, COLS), value));\n  }\n\n\n  \n\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"buttonGroup\">\n        <Dropdown options={algorithmOptions} default={\"Search Algorithm\"}\n          dropDownValueChanged={(value) => setAlgorithm(value)}\n        />\n        {isRunning && (\n          <button className=\"startButton running\">Running {!isRunning && chosenAlgorithm}</button>\n        )}\n        {!isRunning && (\n          <button className=\"startButton\" onClick={async () => await startAlgorithm()}>Start {chosenAlgorithm}</button>\n        )}\n        <button className=\"button\" onClick={() => setGrid(clearWalls(Grid, ROWS, COLS))}>Clear Walls</button>\n        <Dropdown options={directionOptions} default={\"8-Directional\"}\n          dropDownValueChanged={(value) => setDirection(value)}\n        />\n        <Dropdown options={mazeOptions} default={\"Select Maze\"}\n          dropDownValueChanged={(value) => createWalls(value)}\n        />\n        {bombLoc.length > 1 && (\n          <button className=\"button\" onClick={() => { if (bombLoc.length !== 1) { setGrid(removeBomb(Grid, bombLoc[0], bombLoc[1])); setBombLoc([6]); } }}> <img src={bombSVG} alt=\"Bomb Logo\" />REMOVE Bomb</button>\n        )}\n        {bombLoc.length === 1 && (\n          <button className=\"button\" onClick={() => { if (bombLoc.length === 1) { setBombLoc([6, 6]); setGrid(setBomb(Grid, 6, 6)) } }}> <img src={bombSVG} alt=\"Bomb Logo\" />Add Bomb</button>\n        )}\n        <Dropdown options={speedOptions} default={\"Very Fast\"}\n          dropDownValueChanged={(value) => setSpeed(speedSetter(value))}\n        />\n      </div>\n\n      <div className=\"container\">\n        {Grid.map((row, yIndex) => {\n          return (\n            <div key={yIndex} className={\"row\"}>\n              {row.map((node, xIndex) => {\n                return (\n                  <Node\n                    key={xIndex}\n                    isBomb={node.props.isBomb}\n                    isWall={node.props.isWall}\n                    isEnd={node.props.isEnd}\n                    isPath={node.props.isPath}\n                    isVisited={node.props.isVisited}\n                    isStart={node.props.isStart}\n                    handleMouseDown={() => handleMouseDown(yIndex, xIndex)}\n                    handleMouseEnter={() => handleMouseEnter(yIndex, xIndex)}\n                    handleMouseUp={() => handleMouseUp(yIndex, xIndex)}\n                  />\n                )\n\n              })}\n            </div>\n          )\n        })}\n        <div className={\"bottomContainer\"}>\n\n          <Results chosenAlgorithm={chosenAlgorithm} startTime={startTime} content={gridPath} expanded={visitedPath} />\n          <ColourCode />\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}