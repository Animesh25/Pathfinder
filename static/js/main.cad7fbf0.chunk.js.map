{"version":3,"sources":["Components/Node.js","algorithms/common_methods/methods.js","algorithms/a_star_search.js","algorithms/dijkstra.js","algorithms/breadth_first.js","algorithms/depth_first.js","algorithms/best_first.js","Helpers/path_finder.js","Components/Dropdown.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","x","y","useEffect","setWall","isWall","setStart","isStart","setEnd","isEnd","setPath","isPath","setVisited","isVisited","useState","className","onMouseDown","handleMouseDown","onMouseEnter","handleMouseEnter","onMouseUp","handleMouseUp","getSixNeighbours","node","ROWS","COLS","neighbours","push","getFourNeighbours","distance_from_end","endLoc","Math","abs","contains","discovered_nodes","i","length","remove","list","splice","find_lowest_node","path","slice","min_heuristic","min_distance_to_end","dijkstra_algorithm","startLoc","Grid","chosenDirection","visited","unvisited","node_lowest_cost","undefined","console","log","indexOf","neighbour","cost","update_cost","remove_from_unvisited","previous","found","current","unvisted","min_cost","bfs","removed","queue","head","shift","dfs","stack","best_first","open_nodes","closed_nodes","h_score","last_closed","timeout","delay","Promise","res","setTimeout","find_path_from_closed","a","found_start","last","unshift","draw_path","type","newGrid","Dropdown","setOptions","options","hovered","setHover","default","mainValue","setMainValue","menuOptions","value","onClick","changeValue","dropDownValueChanged","onMouseLeave","App","setGrid","mouseDown","setMouseDown","setStartLoc","setEndLoc","startDrag","setStartDrag","endDrag","setEndDrag","gridPath","visitedPath","chosenAlgorithm","setAlgorithm","setDirection","createGrid","grid","dijkstra","clear_visited_path","clear_old_path","draw_path_helper","find_path_from_closed_helper","BFS","best_first_search","DFS","aStarSearch","g_score","f_score","findPath","clearWalls","map","row","yIndex","xIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cad7fbf0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../CSS/node.css';\r\n\r\nfunction Node(props) {\r\n\r\n  const x = props.x;\r\n  const y = props.y;\r\n\r\n  useEffect(() => {\r\n    setWall(props.isWall) //> I'm dispatching an action here.\r\n    setStart(props.isStart) //> I'm dispatching an action here.\r\n    setEnd(props.isEnd)\r\n    setPath(props.isPath)\r\n    setVisited(props.isVisited)\r\n  }, [props.isWall, props.isStart, props.isEnd,props.isPath,props.isVisited])\r\n\r\n  const [isWall, setWall] = useState(false);\r\n  const [isStart, setStart] = useState(false);\r\n  const [isEnd, setEnd] = useState(false);\r\n  const [isPath, setPath] = useState(false);\r\n  const [isVisited, setVisited] = useState(false);\r\n\r\n\r\n  let className = \"node\";\r\n  if (isEnd === true) {\r\n    className = \"end\";\r\n  }\r\n  else if (isStart === true) {\r\n    className = \"start\";\r\n  }\r\n  else if (isWall === true) {\r\n    className = \"wall\";\r\n  }\r\n  else if (isVisited === true) {\r\n    className = \"visited\";\r\n  }\r\n  else if (isPath === true) {\r\n    className = \"path\";\r\n  }\r\n  else {\r\n    className = \"node\";\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onMouseDown={() => props.handleMouseDown(x, y)}\r\n      onMouseEnter={() => props.handleMouseEnter(x, y)}\r\n      onMouseUp={() => props.handleMouseUp()}\r\n      className={className} />\r\n  );\r\n}\r\n\r\nexport default Node;\r\n","export const getSixNeighbours = (node, ROWS, COLS) => {\r\n    // node=node.value\r\n    // console.log(\"row in get neigbours=\", ROWS);\r\n    let neighbours = [];\r\n    // console.log(\"niehgbours func node=\",node.value)\r\n    if (node[0] > 0) {\r\n        neighbours.push([node[0] - 1, node[1]]);\r\n        if (node[1] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] - 1]);\r\n        }\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([node[0], node[1] - 1]);\r\n        if (node[0] < ROWS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] - 1]);\r\n        }\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([node[0] + 1, node[1]]);\r\n        if (node[1] < COLS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] + 1]);\r\n        }\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([node[0], node[1] + 1]);\r\n        if (node[0] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] + 1]);\r\n        }\r\n    }\r\n\r\n    return neighbours;\r\n}\r\nexport const getFourNeighbours = (node, ROWS, COLS) => {\r\n    let neighbours = [];\r\n    if (node[0] > 0) {\r\n        neighbours.push([node[0] - 1, node[1]]);\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([node[0], node[1] - 1]);\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([node[0] + 1, node[1]]);\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([node[0], node[1] + 1]);\r\n    }\r\n\r\n    return neighbours;\r\n\r\n}","\r\nimport {getFourNeighbours,getSixNeighbours} from './common_methods/methods';\r\n\r\nexport const findPath = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    // console.log(\"rows=\",ROWS,\" cols=\",COLS,\" startLoc=\",startLoc,\"  endloc=\",endLoc,\"  grid=\",Grid);\r\n\r\n    let open_nodes = [[startLoc[0], startLoc[1], 0, 0, 0]];\r\n    let closed_nodes = [];\r\n\r\n    while (open_nodes.length > 0 && open_nodes.length < 20000) {\r\n\r\n        const node_lowest_cost = find_lowest_node(open_nodes, closed_nodes);\r\n        if (node_lowest_cost === undefined) break;\r\n\r\n        // console.log(\"lowest=\", node_lowest_cost);\r\n        // console.log(\"chosen from\", open_nodes);\r\n\r\n        let neighbours;\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getSixNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        // console.log(\"neighbours================\",neighbours);\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i];\r\n            let g_score, h_score, f_score = 0;\r\n\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall) {\r\n                continue;\r\n                // console.log(\"isWall\")\r\n                // g_score = 10000;\r\n                // h_score = 10000;\r\n                // f_score = g_score + h_score;\r\n            }\r\n            else {\r\n                g_score = node_lowest_cost[2] + 2;\r\n                h_score = distance_from_end(neighbour,endLoc);\r\n                f_score = g_score + h_score;\r\n            }\r\n\r\n\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                closed_nodes.push(node_lowest_cost);\r\n                closed_nodes.push([neighbour[0], neighbour[1], f_score, h_score, g_score, node_lowest_cost]);\r\n                // console.log(\"end found\");\r\n                break;\r\n            }\r\n\r\n            if (contains(open_nodes, neighbour)) {\r\n                // if (distance_from_start(neighbour) <= f_score) console.log(\"1st if \", neighbour);\r\n            }\r\n            else if (contains(closed_nodes, neighbour)) {\r\n                // console.log(\"neighbour \", neighbour, \" in closed list\");\r\n                // if (distance_from_start(neighbour) <= f_score) console.log(\"2nd if \", neighbour);\r\n                // else {\r\n                // console.log(\"closed_nodes l=\", closed_nodes.length)\r\n                remove(closed_nodes, neighbour);\r\n                // console.log(\"closed_nodes AFTER l=\", closed_nodes.length);\r\n                open_nodes.push([neighbour[0], neighbour[1], f_score, h_score, g_score, node_lowest_cost]);\r\n                // }\r\n\r\n            }\r\n            else {\r\n                open_nodes.push([neighbour[0], neighbour[1], f_score, h_score, g_score, node_lowest_cost]);\r\n            }\r\n        }\r\n        if (closed_nodes.length > 0) {\r\n            const last_closed = closed_nodes[closed_nodes.length - 1];\r\n            if (last_closed[0] === endLoc[0] && last_closed[1] === endLoc[1]) {       \r\n                break;\r\n            }\r\n        }\r\n        if (!contains(closed_nodes, node_lowest_cost)) {\r\n            closed_nodes.push(node_lowest_cost);\r\n        }\r\n    }\r\n    return closed_nodes;\r\n\r\n}\r\n\r\n const getNeighbours = (node,ROWS,COLS) => {\r\n    // node=node.value\r\n    // console.log(\"row in get neigbours=\",ROWS);\r\n    let neighbours = [];\r\n    // console.log(\"niehgbours func node=\",node.value)\r\n    if (node[0] > 0) {\r\n        neighbours.push([node[0] - 1, node[1]]);\r\n        if (node[1] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] - 1]);\r\n        }\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([node[0], node[1] - 1]);\r\n        if (node[0] < ROWS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] - 1]);\r\n        }\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([node[0] + 1, node[1]]);\r\n        if (node[1] < COLS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] + 1]);\r\n        }\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([node[0], node[1] + 1]);\r\n        if (node[0] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] + 1]);\r\n        }\r\n    }\r\n\r\n    return neighbours;\r\n\r\n}\r\n const distance_from_start = (node,startLoc) => {\r\n    const x = Math.abs(node[0] - startLoc[0]);\r\n    const y = Math.abs(node[1] - startLoc[1]);\r\n    return ((x * x) + (y * y))\r\n}\r\n const distance_from_end = (node,endLoc) => {\r\n    //  console.log(\"distance end====================================\",node,\"  endLoc=\",endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\n const contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n const remove = (list, node) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n            return list.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n const find_lowest_node = (discovered_nodes, path) => {\r\n    const copy = discovered_nodes.slice();\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_heuristic = 10000000;\r\n    let min_distance_to_end = 1000000;\r\n    let node;\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][2] < min_heuristic && !contains(path, discovered_nodes[i])) {\r\n            min_heuristic = discovered_nodes[i][2];\r\n            min_distance_to_end = discovered_nodes[i][3];\r\n            node = discovered_nodes[i];\r\n        }\r\n        else if (discovered_nodes[i][2] === min_heuristic && discovered_nodes[i][3] < min_distance_to_end && !contains(path, discovered_nodes[i])) {\r\n            min_heuristic = discovered_nodes[i][2];\r\n            min_distance_to_end = discovered_nodes[i][3];\r\n            node = discovered_nodes[i];\r\n            // console.log(\"found lowest \", node);\r\n        }\r\n    }\r\n    return node;\r\n}\r\n\r\n","import {getFourNeighbours,getSixNeighbours} from './common_methods/methods';\r\n\r\nexport const dijkstra_algorithm = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    //                 -------Node------------ | Cost | Previous\r\n    let visited = [];\r\n    let unvisited = [[startLoc[0], startLoc[1], 0, null]];\r\n\r\n\r\n\r\n    while (unvisited.length > 0 && unvisited.length < 20000) {\r\n\r\n        const node_lowest_cost = find_lowest_node(unvisited);\r\n        \r\n        let neighbours;\r\n        if (node_lowest_cost === undefined) { console.log(\"node_lowest=undefined so break\"); break; }\r\n        \r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getSixNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        \r\n        \r\n        \r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i];\r\n            \r\n            if (contains(visited, neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall) {\r\n                continue\r\n            }\r\n            else {\r\n                cost = 1 + node_lowest_cost[2];\r\n            }\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                visited.push(node_lowest_cost);\r\n                visited.push([neighbour[0], neighbour[1], cost, node_lowest_cost]);\r\n                // console.log(\"end found\");\r\n                return visited;\r\n            }\r\n            update_cost(neighbour, cost, node_lowest_cost, unvisited);\r\n\r\n        }\r\n        unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n        visited.push(node_lowest_cost);\r\n        // console.log(\"visited=\" + visited);\r\n        // console.log(\"not visited=\" + unvisited);\r\n\r\n\r\n    }\r\n    return visited;\r\n\r\n\r\n}\r\nconst update_cost = (node, cost, previous, unvisited) => {\r\n    let found = false;\r\n    for (let i = 0; i < unvisited.length; i++) {\r\n        let current = unvisited[i];\r\n        if (current[0] == node[0] && current[1] == node[1]) {\r\n            found = true;\r\n            if (unvisited[2] > cost) {\r\n                unvisited[2] = cost;\r\n                unvisited[3] = previous;\r\n                return unvisited;\r\n            }\r\n        }\r\n    }\r\n    if (!found) unvisited.push([node[0], node[1], cost, previous]);\r\n    return unvisited;\r\n}\r\nconst remove_from_unvisited = (node, unvisited) => {\r\n\r\n    for (let i = 0; i < unvisited.length; i++) {\r\n        let current = unvisited[i];\r\n        if (current[0] == node[0] && current[1] == node[1]) unvisited.splice(i, 1);\r\n    }\r\n    return unvisited;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst distance_from_start = (node, startLoc) => {\r\n    const x = Math.abs(node[0] - startLoc[0]);\r\n    const y = Math.abs(node[1] - startLoc[1]);\r\n    return ((x * x) + (y * y))\r\n}\r\nconst distance_from_end = (node, endLoc) => {\r\n    // console.log(\"distance end====================================\", node, \"  endLoc=\", endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst remove = (list, node) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n            return list.splice(i, 1);\r\n        }\r\n    }\r\n}\r\nconst find_lowest_node = (unvisted) => {\r\n\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_cost = 10000000;\r\n    let node;\r\n    for (let i = 0; i < unvisted.length; i++) {\r\n        if (unvisted[i][2] < min_cost) {\r\n            min_cost = unvisted[i][2];\r\n            node = unvisted[i];\r\n        }\r\n\r\n    }\r\n    return node;\r\n}\r\n\r\n","import {getFourNeighbours,getSixNeighbours} from './common_methods/methods';\r\n\r\n\r\nexport const bfs = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    //                 -------Node------------ | Cost | Previous\r\n    let removed=[];\r\n    let queue = [[startLoc[0], startLoc[1], 0, null]];\r\n    while (queue.length>0) {\r\n\r\n        const head = queue[0];\r\n\r\n        if (head === undefined) { console.log(\"head=undefined so break\"); break; }\r\n\r\n        let neighbours;\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(head, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getSixNeighbours(head, ROWS, COLS);\r\n        }\r\n\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i];\r\n            \r\n            if (contains(queue, neighbour) || contains(removed,neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall) {\r\n                continue\r\n            }\r\n            else {\r\n                cost = 1 + head[2];\r\n            }\r\n            queue.push([neighbour[0], neighbour[1], cost, head]);\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                removed.push(queue.shift());\r\n                removed.push([neighbour[0], neighbour[1], cost, head]);\r\n                return removed;\r\n            }  \r\n\r\n        }\r\n        removed.push(queue.shift());\r\n        // unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n     \r\n\r\n\r\n    }\r\n    return removed;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\n\r\n","import {getFourNeighbours,getSixNeighbours} from './common_methods/methods';\r\n\r\n\r\nexport const dfs = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    /*\r\n    create unvisited list\r\n        Node | Cost (from start) | Previous node\r\n    \r\n    1. Assign starting node cost=0\r\n    2. Assign all other nodes cost=10000\r\n    3. Assign none for previous for all nodes\r\n\r\n    create visited list\r\n    \r\n    REPEAT \r\n    4. Choose lowest cost node - from unvisited and put into visited\r\n    5.Get node neighbours that are unvisited\r\n    6.Update unvisted list costs\r\n        if current cost+new node edge cost> new node current cost\r\n            don't update the cost\r\n        else \r\n            update cost and previous\r\n    \r\n    */\r\n\r\n\r\n    //                 -------Node------------ | Cost | Previous\r\n    let removed=[];\r\n    let stack = [[startLoc[0], startLoc[1], 0, null]];\r\n    while (stack.length>=0 && stack.length<1000) {\r\n\r\n        const head = stack[stack.length-1];\r\n        console.log(\"stack =\",stack);\r\n        removed.push(head);\r\n        stack.splice(stack.length-1,1);\r\n        if (head === undefined) { console.log(\"head=undefined so break\"); break; }\r\n\r\n        let neighbours;\r\n\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(head, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getSixNeighbours(head, ROWS, COLS);\r\n        }\r\n        \r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i];\r\n            //if node already in stack, then remove it and push it to the back\r\n            if (contains(removed,neighbour)) continue;\r\n            let cost = 0;\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall) {\r\n                continue\r\n            }\r\n            else {\r\n                cost = 1 + head[2];\r\n            }\r\n            stack.push([neighbour[0], neighbour[1], cost, head]);\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                removed.push(head);\r\n                removed.push([neighbour[0], neighbour[1], cost, head]);\r\n                return removed;\r\n            }  \r\n\r\n        }\r\n        \r\n        // unvisited = remove_from_unvisited(node_lowest_cost, unvisited);\r\n     \r\n\r\n\r\n    }\r\n    return removed;\r\n\r\n\r\n}\r\nconst update_cost = (node, cost, previous, unvisited) => {\r\n    let found = false;\r\n    for (let i = 0; i < unvisited.length; i++) {\r\n        let current = unvisited[i];\r\n        if (current[0] == node[0] && current[1] == node[1]) {\r\n            found = true;\r\n            if (unvisited[2] > cost) {\r\n                unvisited[2] = cost;\r\n                unvisited[3] = previous;\r\n                return unvisited;\r\n            }\r\n        }\r\n    }\r\n    if (!found) unvisited.push([node[0], node[1], cost, previous]);\r\n    return unvisited;\r\n}\r\nconst remove_from_unvisited = (node, unvisited) => {\r\n\r\n    for (let i = 0; i < unvisited.length; i++) {\r\n        let current = unvisited[i];\r\n        if (current[0] == node[0] && current[1] == node[1]) unvisited.splice(i, 1);\r\n    }\r\n    return unvisited;\r\n}\r\n\r\nconst getNeighbours = (node, ROWS, COLS) => {\r\n    // node=node.value\r\n    console.log(\"row in get neigbours=\", ROWS);\r\n    let neighbours = [];\r\n    // console.log(\"niehgbours func node=\",node.value)\r\n    //TOP\r\n    if (node[0] > 0) {\r\n        neighbours.push([node[0] - 1, node[1]]);\r\n        //Top Left\r\n        if (node[1] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] - 1]);\r\n        }\r\n    }\r\n    //LEFT\r\n    if (node[1] > 0) {\r\n        neighbours.push([node[0], node[1] - 1]);\r\n        //Bottom Left\r\n        if (node[0] < ROWS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] - 1]);\r\n        }\r\n    }\r\n    //BOTTOM\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([node[0] + 1, node[1]]);\r\n        if (node[1] < COLS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] + 1]);\r\n        }\r\n    }\r\n    //RIGHT\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([node[0], node[1] + 1]);\r\n        if (node[0] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] + 1]);\r\n        }\r\n    }\r\n    //[top,left,bottom,right]\r\n    console.log(\"neibours of:\",node,\"   =\",neighbours);\r\n    return neighbours;\r\n\r\n}\r\nconst distance_from_start = (node, startLoc) => {\r\n    const x = Math.abs(node[0] - startLoc[0]);\r\n    const y = Math.abs(node[1] - startLoc[1]);\r\n    return ((x * x) + (y * y))\r\n}\r\nconst distance_from_end = (node, endLoc) => {\r\n    console.log(\"distance end====================================\", node, \"  endLoc=\", endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\nconst contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst remove = (list, node) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n            return list.splice(i, 1);\r\n        }\r\n    }\r\n}\r\nconst find_lowest_node = (unvisted) => {\r\n\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_cost = 10000000;\r\n    let node;\r\n    for (let i = 0; i < unvisted.length; i++) {\r\n        if (unvisted[i][2] < min_cost) {\r\n            min_cost = unvisted[i][2];\r\n            node = unvisted[i];\r\n        }\r\n\r\n    }\r\n    return node;\r\n}\r\n\r\n","import {getFourNeighbours,getSixNeighbours} from './common_methods/methods';\r\n\r\n\r\nexport const best_first = (ROWS, COLS, startLoc, endLoc, Grid,chosenDirection) => {\r\n\r\n\r\n    console.log(\"rows=\",ROWS,\" cols=\",COLS,\" startLoc=\",startLoc,\"  endloc=\",endLoc,\"  grid=\",Grid);\r\n\r\n    let open_nodes = [[startLoc[0], startLoc[1], 0, 0, 0]];\r\n    let closed_nodes = [];\r\n\r\n    while (open_nodes.length > 0 && open_nodes.length < 20000) {\r\n        const node_lowest_cost = find_lowest_node(open_nodes, closed_nodes);\r\n        if (node_lowest_cost === undefined) break;\r\n\r\n        // console.log(\"lowest=\", node_lowest_cost);\r\n        // console.log(\"chosen from\", open_nodes);\r\n\r\n\r\n        let neighbours;\r\n\r\n        if(chosenDirection.indexOf(\"4\")>-1){\r\n            neighbours= getFourNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        else{\r\n            neighbours= getSixNeighbours(node_lowest_cost, ROWS, COLS);\r\n        }\r\n        console.log(\"neighbours================\",neighbours);\r\n        for (let i = 0; i < neighbours.length; i++) {\r\n            const neighbour = neighbours[i];\r\n            let h_score= 0;\r\n\r\n            if (Grid[neighbour[0]][neighbour[1]].props.isWall) {\r\n                continue;\r\n            }\r\n            else {\r\n                h_score = distance_from_end(neighbour,endLoc);\r\n            }\r\n\r\n\r\n            if (neighbour[0] === endLoc[0] && neighbour[1] === endLoc[1]) {\r\n                closed_nodes.push(node_lowest_cost);\r\n                closed_nodes.push([neighbour[0], neighbour[1], h_score, node_lowest_cost]);\r\n                // console.log(\"end found\");\r\n                break;\r\n            }\r\n\r\n            if (contains(open_nodes, neighbour)) {\r\n                // if (distance_from_start(neighbour) <= f_score) console.log(\"1st if \", neighbour);\r\n            }\r\n            else if (contains(closed_nodes, neighbour)) {\r\n                // console.log(\"neighbour \", neighbour, \" in closed list\");\r\n                // if (distance_from_start(neighbour) <= f_score) console.log(\"2nd if \", neighbour);\r\n                // else {\r\n                // console.log(\"closed_nodes l=\", closed_nodes.length)\r\n                remove(closed_nodes, neighbour);\r\n                // console.log(\"closed_nodes AFTER l=\", closed_nodes.length);\r\n                open_nodes.push([neighbour[0], neighbour[1],h_score, node_lowest_cost]);\r\n                // }\r\n\r\n            }\r\n            else {\r\n                open_nodes.push([neighbour[0], neighbour[1], h_score, node_lowest_cost]);\r\n            }\r\n        }\r\n        if (closed_nodes.length > 0) {\r\n            const last_closed = closed_nodes[closed_nodes.length - 1];\r\n            if (last_closed[0] === endLoc[0] && last_closed[1] === endLoc[1]) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!contains(closed_nodes, node_lowest_cost)) {\r\n            closed_nodes.push(node_lowest_cost);\r\n        }\r\n\r\n        // remove(open_nodes, node_lowest_cost);\r\n        // console.log(\"dn=\", open_nodes);\r\n\r\n\r\n        // break\r\n    }\r\n    // console.log(\"path=\", closed_nodes);\r\n\r\n    return closed_nodes;\r\n\r\n}\r\n\r\n const getNeighbours = (node,ROWS,COLS) => {\r\n    // node=node.value\r\n    console.log(\"row in get neigbours=\",ROWS);\r\n    let neighbours = [];\r\n    // console.log(\"niehgbours func node=\",node.value)\r\n    if (node[0] > 0) {\r\n        neighbours.push([node[0] - 1, node[1]]);\r\n        if (node[1] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] - 1]);\r\n        }\r\n    }\r\n    if (node[1] > 0) {\r\n        neighbours.push([node[0], node[1] - 1]);\r\n        if (node[0] < ROWS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] - 1]);\r\n        }\r\n    }\r\n    if (node[0] < ROWS - 1) {\r\n        neighbours.push([node[0] + 1, node[1]]);\r\n        if (node[1] < COLS - 1) {\r\n            neighbours.push([node[0] + 1, node[1] + 1]);\r\n        }\r\n    }\r\n    if (node[1] < COLS - 1) {\r\n        neighbours.push([node[0], node[1] + 1]);\r\n        if (node[0] > 0) {\r\n            neighbours.push([node[0] - 1, node[1] + 1]);\r\n        }\r\n    }\r\n\r\n    return neighbours;\r\n\r\n}\r\n const distance_from_start = (node,startLoc) => {\r\n    const x = Math.abs(node[0] - startLoc[0]);\r\n    const y = Math.abs(node[1] - startLoc[1]);\r\n    return ((x * x) + (y * y))\r\n}\r\n const distance_from_end = (node,endLoc) => {\r\n     console.log(\"distance end====================================\",node,\"  endLoc=\",endLoc);\r\n    const x = Math.abs(node[0] - endLoc[0]);\r\n    const y = Math.abs(node[1] - endLoc[1]);\r\n    return ((x * x) + (y * y))\r\n\r\n}\r\n\r\n\r\n const contains = (discovered_nodes, node) => {\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][0] === node[0] && discovered_nodes[i][1] === node[1]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n const remove = (list, node) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i][0] === node[0] && list[i][1] === node[1]) {\r\n            return list.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n const find_lowest_node = (discovered_nodes, path) => {\r\n    const copy = discovered_nodes.slice();\r\n    // console.log(\"find lowest slice=\", copy);\r\n    let min_heuristic = 10000000;\r\n    let node;\r\n    for (let i = 0; i < discovered_nodes.length; i++) {\r\n        if (discovered_nodes[i][2] < min_heuristic && !contains(path, discovered_nodes[i])) {\r\n            min_heuristic = discovered_nodes[i][2];\r\n            node = discovered_nodes[i];\r\n        }\r\n    }\r\n    return node;\r\n}\r\n\r\n","import Node from '../Components/Node';\r\n\r\nexport function timeout(delay) {\r\n    return new Promise(res => setTimeout(res, delay));\r\n}\r\n\r\nexport const find_path_from_closed = async (closed_nodes, startLoc) => {\r\n    let path = [];\r\n    let found_start = false;\r\n    let last = closed_nodes[closed_nodes.length - 1];\r\n    while (found_start === false) {\r\n        path.unshift(last);\r\n        if (last === undefined) break;\r\n        if (last[0] === startLoc[0] && last[1] === startLoc[1]) found_start = true;\r\n        else {\r\n            last = last[last.length - 1];\r\n        }\r\n    }\r\n    return path;\r\n}\r\nexport const draw_path = async (Grid, path, i, type) => {\r\n    const newGrid = Grid.slice();\r\n    if (i > 0 && i < path.length - 1) {\r\n        const x = path[i][0];\r\n        const y = path[i][1]\r\n        // console.log(\"node=\", x, y);\r\n        // console.log(newGrid[x][y])\r\n        if (type === \"visited\") {\r\n            newGrid[x][y] = <Node\r\n                isWall={false}\r\n                isStart={Grid[x][y].props.isStart}\r\n                isEnd={Grid[x][y].props.isEnd}\r\n                isPath={false}\r\n                isVisited={true}\r\n            />;\r\n        }\r\n        else {\r\n            newGrid[x][y] = <Node\r\n                isWall={false}\r\n                isStart={Grid[x][y].props.isStart}\r\n                isEnd={Grid[x][y].props.isEnd}\r\n                isPath={true}\r\n                isVisited={false}\r\n            />;\r\n        }\r\n    }\r\n    return newGrid;\r\n\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../CSS/dropdown.css';\r\n\r\nfunction Dropdown(props) {\r\n    useEffect(() => {\r\n        setOptions(props.options) //> I'm dispatching an action here.\r\n    }, [props.options])\r\n\r\n    const [options, setOptions] = useState([]);\r\n    const [hovered, setHover] = useState(false);\r\n    const [mainValue, setMainValue] = useState(props.default);\r\n\r\n    let menuOptions=[];\r\n    for(const value of options){\r\n        menuOptions.push(<p onClick={()=>changeValue(value)} className={\"item\"}>{value}</p>)\r\n    }\r\n    \r\n    const changeValue=(value)=>{\r\n        setMainValue(value);\r\n        props.dropDownValueChanged(value);\r\n    }\r\n\r\n    return (\r\n        <div className={\"dropdownContainer\"}  onMouseEnter={() => setHover(true)} onMouseLeave={() => setHover(false)} >\r\n            <div className={\"dropdown\"}>\r\n                <p className={\"value\"}>{mainValue}</p>\r\n            </div>\r\n            {hovered && (\r\n                <div className={\"subMenu\"}>\r\n                    {menuOptions}\r\n                </div>\r\n            )}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Dropdown;","import React, { useState, useEffect } from 'react';\n\nimport './CSS/grid.css';\nimport Node from './Components/Node';\nimport { findPath } from './algorithms/a_star_search';\nimport { dijkstra_algorithm } from './algorithms/dijkstra';\nimport { bfs } from './algorithms/breadth_first';\nimport { dfs } from './algorithms/depth_first';\nimport { best_first } from './algorithms/best_first';\nimport { timeout, find_path_from_closed, draw_path } from './Helpers/path_finder';\nimport Dropdown from './Components/Dropdown';\n\n\n\nfunction App() {\n\n  const [Grid, setGrid] = useState([]);\n  const [mouseDown, setMouseDown] = useState(false);\n  const [startLoc, setStartLoc] = useState([5, 5]);\n  const [endLoc, setEndLoc] = useState([5, 15]);\n  const [startDrag, setStartDrag] = useState(false);\n  const [endDrag, setEndDrag] = useState(false);\n  const [gridPath, setPath] = useState([]);\n  const [visitedPath, setVisited] = useState([]);\n  const [chosenAlgorithm, setAlgorithm] = useState(\"\");\n  const [chosenDirection, setDirection] = useState(\"\");\n  \n\n  useEffect(() => {\n    setGrid(createGrid());\n\n  }, []);\n\n  const ROWS = 15;\n  const COLS = 45;\n\n  const createGrid = () => {\n\n    let grid = [];\n    for (let y = 0; y < ROWS; y++) {\n      grid.push([]);\n      for (let x = 0; x < COLS; x++) {\n        grid[y].push(\n          <Node\n            handleMouseDown={() => handleMouseDown(x, y)}\n            handleMouseEnter={() => handleMouseEnter(x, y)}\n            handleMouseUp={() => handleMouseUp()}\n            isWall={false} />\n        );\n      }\n    }\n    grid[startLoc[0]][startLoc[1]] = <Node\n      isWall={false}\n      isStart={true}\n      isEnd={false}\n      isPath={false}\n      isVisited={false}\n      handleMouseDown={() => handleMouseDown(startLoc[0], startLoc[1])}\n      handleMouseEnter={() => handleMouseEnter(startLoc[0], startLoc[1])}\n      handleMouseUp={() => handleMouseUp(startLoc[0], startLoc[1])}\n    />;\n    grid[endLoc[0]][endLoc[1]] = <Node\n      isWall={false}\n      isStart={false}\n      isPath={false}\n      isVisited={false}\n      isEnd={true}\n      handleMouseDown={() => handleMouseDown(endLoc[0], endLoc[1])}\n      handleMouseEnter={() => handleMouseEnter(endLoc[0], endLoc[1])}\n      handleMouseUp={() => handleMouseUp(endLoc[0], endLoc[1])}\n    />;\n\n    return grid;\n  }\n\n\n  const handleMouseDown = (x, y) => {\n    if (x === null || y === null || x < 0 || y < 0) return;\n    // console.log(\"mouse down at\", x, \",\", y);\n    setMouseDown(true);\n    console.log(\"start drag-------------x,y=\", x, \",\", y);\n    console.log(\"start drag-------------startLoc0,startLoc1=\", startLoc[0], \",\", startLoc[1]);\n    if (x == startLoc[0] && y == startLoc[1]) {\n      setStartDrag(true);\n    }\n    else if (x == endLoc[0] && y == endLoc[1]) {\n      setEndDrag(true);\n    }\n    else {\n      // else setStartDrag(false);\n      let newGrid = Grid.slice();\n      if (newGrid[x][y].props.isStart || newGrid[x][y].props.isEnd) return;\n      // console.log(\"boolean=\", newGrid[x][y].props.isWall)\n      newGrid[x][y] =\n        <Node\n          key={y}\n          handleMouseDown={() => handleMouseDown(x, y)}\n          handleMouseEnter={() => handleMouseEnter(x, y)}\n          handleMouseUp={() => handleMouseUp(x, y)}\n          isWall={!newGrid[x][y].props.isWall} />\n\n      // console.log(\"new grid[\", x, \"][\", y, \"]=\", newGrid[x][y])\n      setGrid(newGrid)\n    }\n\n  }\n\n  //if moving start or end we want to retain previous wall position\n  /**\n   * oldGrid=grid\n   * if(start or end)\n   *    \n   */\n  const handleMouseEnter = (x, y) => {\n    if (x === null || y === null || x < 0 || y < 0) return;\n    if (x === endLoc[0] && y === endLoc[1]) return;\n    if (x === startLoc[0] && y === startLoc[1]) return;\n    if (mouseDown) {\n      let newGrid = Grid.slice();\n      if (!startDrag && !endDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            handleMouseDown={() => handleMouseDown(x, y)}\n            handleMouseEnter={() => handleMouseEnter(x, y)}\n            handleMouseUp={() => handleMouseUp(x, y)}\n            isStart={false}\n            isPath={false}\n            isVisited={false}\n            isWall={!newGrid[x][y].props.isWall} />\n      }\n      if (startDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            handleMouseDown={() => handleMouseDown(x, y)}\n            handleMouseEnter={() => handleMouseEnter(x, y)}\n            handleMouseUp={() => handleMouseUp(x, y)}\n            isStart={true}\n            isWall={newGrid[x][y].props.isWall} />\n        newGrid[startLoc[0]][startLoc[1]] = <Node\n          isWall={newGrid[startLoc[0]][startLoc[1]].props.isWall}\n          isStart={false}\n          isEnd={false}\n          isPath={false}\n          isVisited={false}\n          handleMouseDown={() => handleMouseDown(x, y)}\n          handleMouseEnter={() => handleMouseEnter(x, y)}\n          handleMouseUp={() => handleMouseUp(x, y)}\n        />;\n        setStartLoc([x, y])\n      }\n      else if (endDrag) {\n        newGrid[x][y] =\n          <Node\n            key={y}\n            handleMouseDown={() => handleMouseDown(x, y)}\n            handleMouseEnter={() => handleMouseEnter(x, y)}\n            handleMouseUp={() => handleMouseUp(x, y)}\n            isStart={false}\n            isEnd={true}\n            isWall={newGrid[x][y].props.isWall}\n            isPath={false}\n            isVisited={false} />\n        newGrid[endLoc[0]][endLoc[1]] = <Node\n          isWall={newGrid[endLoc[0]][endLoc[1]].props.isWall}\n          isStart={false}\n          isEnd={false}\n          isPath={false}\n          isVisited={false}\n          handleMouseDown={() => handleMouseDown(x, y)}\n          handleMouseEnter={() => handleMouseEnter(x, y)}\n          handleMouseUp={() => handleMouseUp(x, y)}\n        />;\n        console.log(\"set wall at endloc=\", endLoc);\n        setEndLoc([x, y])\n\n        console.log(\"new endloc=\", endLoc)\n      }\n      setGrid(newGrid)\n    }\n\n\n\n  }\n  const handleMouseUp = (x, y) => {\n    if (x === null || y === null || x < 0 || y < 0) return;\n    setMouseDown(false);\n    if (startDrag) {\n      setStart(x, y)\n    }\n    else if (endDrag) {\n      // setEnd(x,y);\n    }\n    setStartDrag(false);\n    setEndDrag(false);\n  }\n  const dijkstra = async () => {\n    let closed_nodes = dijkstra_algorithm(ROWS, COLS, startLoc, endLoc, Grid,chosenDirection);\n\n    clear_visited_path();\n    clear_old_path(gridPath);\n    setVisited(closed_nodes);\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    await find_path_from_closed_helper(closed_nodes);\n  }\n  const BFS = async () => {\n    let closed_nodes = bfs(ROWS, COLS, startLoc, endLoc, Grid,chosenDirection);\n    // console.log(\"BFS closed=\", closed_nodes);\n    clear_visited_path();\n    clear_old_path(gridPath);\n    setVisited(closed_nodes);\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    await find_path_from_closed_helper(closed_nodes);\n  }\n\n  const best_first_search = async () => {\n    let closed_nodes = best_first(ROWS, COLS, startLoc, endLoc, Grid,chosenDirection);\n    clear_visited_path();\n    clear_old_path(gridPath);\n    setVisited(closed_nodes);\n    // console.log(\"length=\", closed_nodes.length);\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    await find_path_from_closed_helper(closed_nodes);\n  }\n  const DFS = async () => {\n    let closed_nodes = dfs(ROWS, COLS, startLoc, endLoc, Grid,chosenDirection);\n    clear_visited_path();\n    clear_old_path(gridPath);\n    setVisited(closed_nodes);\n    // console.log(\"length=\", closed_nodes.length);\n    await draw_path_helper(closed_nodes, 1, \"visited\");\n    await draw_path_helper(closed_nodes, 1, \"path\");\n  }\n  const aStarSearch = () => {\n    clear_visited_path();\n    clear_old_path(gridPath);\n    let closed_nodes = findPath(ROWS, COLS, startLoc, endLoc, Grid,chosenDirection);\n    find_path_from_closed_helper(closed_nodes);\n  }\n  const find_path_from_closed_helper = async (closed_nodes) => {\n    let path = await find_path_from_closed(closed_nodes, startLoc);;\n    setPath(path);\n    console.log(\"path==================\", path);\n    await draw_path_helper(path, 1, \"path\");\n  }\n  const clear_visited_path = () => {\n    const newGrid = Grid.slice();\n    for (let i = 1; i < visitedPath.length - 1; i++) {\n      const x = visitedPath[i][0];\n      const y = visitedPath[i][1]\n      newGrid[x][y] = <Node\n        isWall={Grid[x][y].props.isWall}\n        isStart={Grid[x][y].props.isStart}\n        isEnd={Grid[x][y].props.isEnd}\n        isPath={false}\n        isVisited={false}\n      />;\n    }\n    setGrid(newGrid);\n  }\n  const clear_old_path = (path) => {\n    const newGrid = Grid.slice();\n\n    for (let i = 1; i < path.length - 1; i++) {\n      const x = path[i][0];\n      const y = path[i][1]\n      newGrid[x][y] = <Node\n        isWall={Grid[x][y].props.isWall}\n        isStart={Grid[x][y].props.isStart}\n        isEnd={Grid[x][y].props.isEnd}\n        isPath={false}\n        isVisited={false}\n\n      />;\n    }\n    setGrid(newGrid);\n  }\n\n\n  const draw_path_helper = async (path, i, type) => {\n    if (i > 0 && i < path.length - 1) {\n      let newGrid = await draw_path(Grid, path, i, type)\n      setGrid(newGrid);\n      await timeout(5);\n      await draw_path_helper(path, i + 1, type);\n    }\n  }\n\n\n\n\n\n  const setStart = (x, y) => {\n    const newGrid = Grid.slice();// doing a deep copy of the array\n    newGrid[startLoc[0]][startLoc[1]] = <Node\n      isWall={false}\n      isStart={true}\n      isEnd={false}\n      isPath={false}\n      isVisited={false}\n      handleMouseDown={() => handleMouseDown(x, y)}\n      handleMouseEnter={() => handleMouseEnter(x, y)}\n      handleMouseUp={() => handleMouseUp(x, y)}\n    />;\n    newGrid[endLoc[0]][endLoc[1]] = <Node\n      isWall={false}\n      isStart={false}\n      isPath={false}\n      isVisited={false}\n      isEnd={true}\n      handleMouseDown={() => handleMouseDown(x, y)}\n      handleMouseEnter={() => handleMouseEnter(x, y)}\n      handleMouseUp={() => handleMouseUp(x, y)}\n    />;\n    setGrid(newGrid);\n\n  }\n  const clearWalls = () => {\n    let grid = [];\n    for (let y = 0; y < ROWS; y++) {\n      grid.push([]);\n      for (let x = 0; x < COLS; x++) {\n        grid[y].push(\n          <Node\n            handleMouseDown={() => handleMouseDown(x, y)}\n            handleMouseEnter={() => handleMouseEnter(x, y)}\n            handleMouseUp={() => handleMouseUp(x, y)}\n            isWall={false}\n            isPath={false}\n            isVisited={false}\n            isStart={Grid[y][x].props.isStart}\n            isEnd={Grid[y][x].props.isEnd} />\n        );\n      }\n    }\n    setGrid(grid);\n  }\n  const algorithmOptions = [\n    'A* star', 'Dijkstra', 'Depth-First Search', 'Breadth-First Search', 'Best-First Search'\n  ];\n  const directionOptions=[\n    '4-Directional','6-Directional'\n  ]\n  const startAlgorithm=()=>{\n    if(chosenAlgorithm===\"A* star\"){\n      aStarSearch()\n    }\n    else if(chosenAlgorithm===\"Dijkstra\"){\n      dijkstra()\n    }\n    else if(chosenAlgorithm===\"Breadth-First Search\"){\n      BFS()\n    }\n    else if(chosenAlgorithm===\"Depth-First Search\"){\n      DFS()\n    }\n    else if(chosenAlgorithm===\"Best-First Search\"){\n      best_first_search();\n    }\n  }\n  \n  \n  \n  \n  return (\n    <div className=\"App\">\n      <div className=\"buttonGroup\">\n        <Dropdown options={algorithmOptions} default={\"Search Algorithm\"}\n          dropDownValueChanged={(value)=>setAlgorithm(value)} \n        />\n        <button className=\"startButton\" onClick={() =>startAlgorithm()}>Start {chosenAlgorithm}</button>\n        <button className=\"button\" onClick={() => clearWalls()}>Clear Walls</button>\n        <Dropdown options={directionOptions} default={\"6-Directional\"}\n          dropDownValueChanged={(value)=>setDirection(value)} \n        />\n        {/* <button className=\"button\" onClick={() => aStarSearch()}>A* search</button>\n        <button className=\"button\" onClick={() => dijkstra()}>Dijkstra</button>\n        <button className=\"button\" onClick={() => BFS()}>BFS</button>\n        <button className=\"button\" onClick={() => DFS()}>DFS</button>\n        <button className=\"button\" onClick={() => best_first_search()}>Best First Search</button> */}\n        \n      </div>\n      <div className=\"container\">\n        {Grid.map((row, yIndex) => {\n          return (\n            <div key={yIndex} className={\"row\"}>\n              {row.map((node, xIndex) => {\n                return (\n                  <Node\n                    key={xIndex}\n                    isWall={node.props.isWall}\n                    isEnd={node.props.isEnd}\n                    isPath={node.props.isPath}\n                    isVisited={node.props.isVisited}\n                    isStart={node.props.isStart}\n                    handleMouseDown={() => handleMouseDown(yIndex, xIndex)}\n                    handleMouseEnter={() => handleMouseEnter(yIndex, xIndex)}\n                    handleMouseUp={() => handleMouseUp(yIndex, xIndex)}\n                  />\n                )\n\n              })}\n            </div>\n          )\n\n        })}\n\n        <div className=\"keySet\">\n          <div className=\"key\">\n            <Node\n              key={-1}\n              isWall={true}\n              isEnd={false}\n              isPath={false}\n              isVisited={false}\n              isStart={false}\n              handleMouseDown={() => handleMouseDown(-1, -1)}\n              handleMouseEnter={() => handleMouseEnter(-1, -1)}\n              handleMouseUp={() => handleMouseUp(-1, -1)}\n            />\n            <h3>Wall</h3>\n          </div>\n          <div className=\"key\">\n            <Node\n              key={-1}\n              isWall={false}\n              isEnd={false}\n              isPath={false}\n              isVisited={false}\n              isStart={true}\n              handleMouseDown={() => handleMouseDown(-1, -1)}\n              handleMouseEnter={() => handleMouseEnter(-1, -1)}\n              handleMouseUp={() => handleMouseUp(-1, -1)}\n            />\n            <h3>Start</h3>\n          </div>\n          <div className=\"key\">\n            <Node\n              key={-1}\n              isWall={false}\n              isEnd={true}\n              isPath={false}\n              isVisited={false}\n              isStart={false}\n              handleMouseDown={() => handleMouseDown(-1, -1)}\n              handleMouseEnter={() => handleMouseEnter(-1, -1)}\n              handleMouseUp={() => handleMouseUp(-1, -1)}\n            />\n            <h3>End</h3>\n          </div>\n          <div className=\"key\">\n            <Node\n              key={-1}\n              isWall={false}\n              isEnd={false}\n              isPath={false}\n              isVisited={true}\n              isStart={false}\n              handleMouseDown={() => handleMouseDown(-1, -1)}\n              handleMouseEnter={() => handleMouseEnter(-1, -1)}\n              handleMouseUp={() => handleMouseUp(-1, -1)}\n            />\n            <h3>Visited</h3>\n          </div>\n          <div className=\"key\">\n            <Node\n              key={-1}\n              isWall={false}\n              isEnd={false}\n              isPath={true}\n              isVisited={false}\n              isStart={false}\n              handleMouseDown={() => handleMouseDown(-1, -1)}\n              handleMouseEnter={() => handleMouseEnter(-1, -1)}\n              handleMouseUp={() => handleMouseUp(-1, -1)}\n            />\n            <h3>Path</h3>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}